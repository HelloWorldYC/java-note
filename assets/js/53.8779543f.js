(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{470:function(v,_,a){"use strict";a.r(_);var e=a(4),t=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("blockquote",[_("p",[v._v("这篇文章以问答的形式用于快速回顾知识点以及用于自测。"),_("br"),v._v("\n因为知识点相当多，即使在看时能够理解记住，但过后也往往只是有印象，大概知道是什么东西，但想回答出来却总是卡壳，看了忘，忘了看。因此，这篇文章用于帮助速记回忆，自测时可以由这些点延伸。\n注：参考的主要是 Guide 哥的网站内容以及 chatGPT。")])]),v._v(" "),_("h2",{attrs:{id:"集合概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#集合概述"}},[v._v("#")]),v._v(" 集合概述")]),v._v(" "),_("h4",{attrs:{id:"java-集合概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-集合概述"}},[v._v("#")]),v._v(" Java 集合概述？")]),v._v(" "),_("p",[v._v("Java 集合，也叫容器 ，主要由两大接口派生而来：一个是 "),_("code",[v._v("Collection")]),v._v(" 接口，主要用于存放单一元素；另一个是 "),_("code",[v._v("Map")]),v._v(" 接口，主要用于存放键值对。对于 "),_("code",[v._v("Collection")]),v._v(" 接口，下面又有三个主要的子接口："),_("code",[v._v("List")]),v._v("、"),_("code",[v._v("Set")]),v._v(" 和 "),_("code",[v._v("Queue")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"说说-list、set、queue、map-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说-list、set、queue、map-的区别"}},[v._v("#")]),v._v(" 说说 List、Set、Queue、Map 的区别？")]),v._v(" "),_("ul",[_("li",[v._v("List：存储的元素是有序的、可重复的。")]),v._v(" "),_("li",[v._v("Set：存储的元素不可重复。")]),v._v(" "),_("li",[v._v("Queue：存储的元素有序、可重复，按特定排队规则确定先后顺序。")]),v._v(" "),_("li",[v._v("Map：key 无序、不可重复，value 无序、可重复。")])]),v._v(" "),_("h4",{attrs:{id:"如何选用集合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何选用集合"}},[v._v("#")]),v._v(" 如何选用集合？")]),v._v(" "),_("ul",[_("li",[v._v("需要键值获取到元素值时就选用 "),_("code",[v._v("Map")]),v._v(" 接口下的集合，需要排序时选择 "),_("code",[v._v("TreeMap")]),v._v("，不需要排序时就选择 "),_("code",[v._v("HashMap")]),v._v("，需要保证线程安全就选用 "),_("code",[v._v("ConcurrentHashMap")]),v._v("。")]),v._v(" "),_("li",[v._v("只需要存放元素值时，就选择实现 "),_("code",[v._v("Collection")]),v._v(" 接口的集合，需要保证元素唯一时选择实现 "),_("code",[v._v("Set")]),v._v(" 接口的集合比如 "),_("code",[v._v("TreeSet")]),v._v(" 或 "),_("code",[v._v("HashSet")]),v._v("，不需要就选择实现 "),_("code",[v._v("List")]),v._v(" 接口的比如 "),_("code",[v._v("ArrayList")]),v._v(" 或 "),_("code",[v._v("LinkedList")]),v._v("。")])]),v._v(" "),_("h4",{attrs:{id:"为什么要使用集合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用集合"}},[v._v("#")]),v._v(" 为什么要使用集合？")]),v._v(" "),_("p",[v._v("与数组相比，Java 集合提供了更灵活、更有效的方法来存储多个数据对象。Java 集合框架中的各种集合类和接口可以存储不同类型和数量的对象，同时还具有多样化的操作方式。相较于数组，Java 集合的优势在于它们的大小可变、支持泛型、具有内建算法等。")]),v._v(" "),_("h2",{attrs:{id:"collection-子接口之-list"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口之-list"}},[v._v("#")]),v._v(" Collection 子接口之 List")]),v._v(" "),_("h4",{attrs:{id:"arraylist-和-array-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-array-的区别"}},[v._v("#")]),v._v(" ArrayList 和 Array 的区别？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("ArrayList")]),v._v(" 内部基于动态数组实现，会根据实际存储的元素动态地扩容或缩容；"),_("code",[v._v("Array")]),v._v(" 内部是静态数组，被创建之后就不能改变长度了。")]),v._v(" "),_("li",[_("code",[v._v("ArrayList")]),v._v(" 允许使用泛型来确保类型安全，"),_("code",[v._v("Array")]),v._v(" 则不可以。")]),v._v(" "),_("li",[_("code",[v._v("ArrayList")]),v._v(" 中只能存储对象，而 "),_("code",[v._v("Array")]),v._v(" 可以存储基本类型数据和对象。")]),v._v(" "),_("li",[_("code",[v._v("ArrayList")]),v._v(" 支持插入、删除、遍历等常见操作，并且提供了丰富的 API 操作方法，比如 "),_("code",[v._v("add()")]),v._v("、"),_("code",[v._v("remove()")]),v._v("。"),_("code",[v._v("Array")]),v._v(" 只是固定长度的数组，只能按下标访问元素，不具备动态添加删除元素的能力。")]),v._v(" "),_("li",[_("code",[v._v("ArrayList")]),v._v(" 创建时不需要指定大小，而 "),_("code",[v._v("Array")]),v._v(" 创建时必须指定大小。")])]),v._v(" "),_("h4",{attrs:{id:"arraylist-和-vector-的区别-了解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-vector-的区别-了解"}},[v._v("#")]),v._v(" ArrayList 和 Vector 的区别？（了解）")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("ArrayList")]),v._v(" 是 "),_("code",[v._v("List")]),v._v(" 的主要实现类，底层使用 "),_("code",[v._v("Object[]")]),v._v(" 存储，适用于频繁的查找工作，线程不安全 。")]),v._v(" "),_("li",[_("code",[v._v("Vector")]),v._v(" 是 "),_("code",[v._v("List")]),v._v(" 的古老实现类，底层使用 "),_("code",[v._v("Object[]")]),v._v(" 存储，线程安全。")])]),v._v(" "),_("h4",{attrs:{id:"vector-和-stack-的区别-了解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vector-和-stack-的区别-了解"}},[v._v("#")]),v._v(" Vector 和 Stack 的区别？（了解）")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Vector")]),v._v(" 和 "),_("code",[v._v("Stack")]),v._v(" 两者都是线程安全的，都是使用 "),_("code",[v._v("synchronized")]),v._v(" 关键字进行同步处理。")]),v._v(" "),_("li",[_("code",[v._v("Stack")]),v._v(" 继承自 "),_("code",[v._v("Vector")]),v._v("，是一个后进先出的栈，而 "),_("code",[v._v("Vector")]),v._v(" 是一个列表。")])]),v._v(" "),_("h4",{attrs:{id:"arraylist-可以添加-null-值吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-可以添加-null-值吗"}},[v._v("#")]),v._v(" ArrayList 可以添加 null 值吗？")]),v._v(" "),_("p",[_("code",[v._v("ArrayList")]),v._v(" 中可以存储任何类型的对象，包括 "),_("code",[v._v("null")]),v._v(" 值，但不建议。")]),v._v(" "),_("h4",{attrs:{id:"arraylist-插入和删除元素的时间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-插入和删除元素的时间复杂度"}},[v._v("#")]),v._v(" ArrayList 插入和删除元素的时间复杂度？")]),v._v(" "),_("p",[v._v("对于插入：")]),v._v(" "),_("ul",[_("li",[v._v("头部插入：由于需要将所有元素都依次向后移动一个位置，因此时间复杂度是 O(n)。")]),v._v(" "),_("li",[v._v("尾部插入：当 ArrayList 的容量未达到极限时，往列表末尾插入元素的时间复杂度是 O(1)，因为它只需要在数组末尾添加一个元素即可；当容量已达到极限并且需要扩容时，则需要执行一次 O(n) 的操作将原数组复制到新的更大的数组中，然后再执行 O(1) 的操作添加元素。")]),v._v(" "),_("li",[v._v("指定位置插入：需要将目标位置之后的所有元素都向后移动一个位置，然后再把新元素放入指定位置。这个过程需要移动平均 n/2 个元素，因此时间复杂度为 O(n)。")])]),v._v(" "),_("p",[v._v("对于删除：")]),v._v(" "),_("ul",[_("li",[v._v("头部删除：由于需要将所有元素依次向前移动一个位置，因此时间复杂度是 O(n)。")]),v._v(" "),_("li",[v._v("尾部删除：当删除的元素位于列表末尾时，时间复杂度为 O(1)。")]),v._v(" "),_("li",[v._v("指定位置删除：需要将目标元素之后的所有元素向前移动一个位置以填补被删除的空白位置，因此需要移动平均 n/2 个元素，时间复杂度为 O(n)。")])]),v._v(" "),_("h4",{attrs:{id:"linkedlist-插入和删除元素的时间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist-插入和删除元素的时间复杂度"}},[v._v("#")]),v._v(" LinkedList 插入和删除元素的时间复杂度？")]),v._v(" "),_("ul",[_("li",[v._v("头部插入/删除：只需要修改头结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)。")]),v._v(" "),_("li",[v._v("尾部插入/删除：只需要修改尾结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)。")]),v._v(" "),_("li",[v._v("指定位置插入/删除：需要先移动到指定位置，再修改指定节点的指针完成插入/删除，因此需要移动平均 n/2 个元素，时间复杂度为 O(n)。")])]),v._v(" "),_("h4",{attrs:{id:"linkedlist-为什么不能实现-randomaccess-接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist-为什么不能实现-randomaccess-接口"}},[v._v("#")]),v._v(" LinkedList 为什么不能实现 "),_("code",[v._v("RandomAccess")]),v._v(" 接口？")]),v._v(" "),_("p",[_("code",[v._v("RandomAccess")]),v._v(" 是一个标记接口，用来表明实现该接口的类支持随机访问（即可以通过索引快速访问元素）。由于 "),_("code",[v._v("LinkedList")]),v._v(" 底层数据结构是链表，内存地址不连续，只能通过指针来定位，不支持随机快速访问，所以不能实现 "),_("code",[v._v("RandomAccess")]),v._v(" 接口。")]),v._v(" "),_("h4",{attrs:{id:"arraylist-和-linkedlist-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-linkedlist-的区别"}},[v._v("#")]),v._v(" ArrayList 和 LinkedList 的区别？")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("底层数据结构")]),v._v("："),_("code",[v._v("ArrayList")]),v._v(" 底层使用的是 "),_("code",[v._v("Object")]),v._v(" 数组；"),_("code",[v._v("LinkedList")]),v._v(" 底层使用的是双向链表数据结构。")]),v._v(" "),_("li",[_("strong",[v._v("是否线程安全")]),v._v("：两者都不是线程安全的。")]),v._v(" "),_("li",[_("strong",[v._v("插入和删除元素的时间复杂度不一样")]),v._v("："),_("code",[v._v("ArrayList")]),v._v(" 头部 O(n)，尾部 O(1) 或 O(n)，指定位置 O(n)；"),_("code",[v._v("LinkedList")]),v._v(" 头部和尾部 O(1)，指定位置 O(n)。")]),v._v(" "),_("li",[_("strong",[v._v("是否支持快速随机访问")]),v._v("："),_("code",[v._v("ArrayList")]),v._v(" 支持，"),_("code",[v._v("LinkedList")]),v._v(" 不支持。")]),v._v(" "),_("li",[_("strong",[v._v("内存占用")]),v._v("："),_("code",[v._v("ArrayList")]),v._v(" 的空间浪费主要体现在在 "),_("code",[v._v("list")]),v._v(" 列表的结尾会预留一定的容量空间，而 "),_("code",[v._v("LinkedList")]),v._v(" 的空间花费则体现在它的每一个元素都需要消耗更多的空间（因为要存放直接后继和直接前驱以及数据）。")])]),v._v(" "),_("h4",{attrs:{id:"双向列表和双向循环链表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#双向列表和双向循环链表"}},[v._v("#")]),v._v(" 双向列表和双向循环链表？")]),v._v(" "),_("ul",[_("li",[v._v("双向链表：包含两个指针，一个 "),_("code",[v._v("prev")]),v._v(" 指向前一个节点，一个 "),_("code",[v._v("next")]),v._v(" 指向后一个节点。")]),v._v(" "),_("li",[v._v("双向循环链表：最后一个节点的 "),_("code",[v._v("next")]),v._v(" 指向 "),_("code",[v._v("head")]),v._v("，而 "),_("code",[v._v("head")]),v._v(" 的 "),_("code",[v._v("prev")]),v._v(" 指向最后一个节点，构成一个环。")])]),v._v(" "),_("h4",{attrs:{id:"randomaccess-接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#randomaccess-接口"}},[v._v("#")]),v._v(" RandomAccess 接口？")]),v._v(" "),_("p",[v._v("实际上 "),_("code",[v._v("RandomAccess")]),v._v(" 接口中什么都没有定义，它只是一个标识，标识实现这个接口的类具有随机访问功能。")]),v._v(" "),_("h4",{attrs:{id:"说一说-arraylist-的扩容机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说一说-arraylist-的扩容机制"}},[v._v("#")]),v._v(" 说一说 ArrayList 的扩容机制？")]),v._v(" "),_("ol",[_("li",[v._v("当需要添加一个新元素到 "),_("code",[v._v("ArrayList")]),v._v(" 中时，首先检查当前元素个数是否达到了数组的容量上限。如果达到了容量上限，则需要进行扩容操作。")]),v._v(" "),_("li",[v._v("扩容操作开始时，"),_("code",[v._v("ArrayList")]),v._v(" 会创建一个新的数组，其大小通常是当前容量的 1.5 倍(具体的增长因子可以根据实现而有所不同)。")]),v._v(" "),_("li",[_("code",[v._v("ArrayList")]),v._v(" 会将原数组中的所有元素复制到新的数组中。这个过程通过使用 "),_("code",[v._v("System.arraycopy()")]),v._v(" 方法或类似的手动复制操作来完成。")]),v._v(" "),_("li",[v._v("复制完成后，"),_("code",[v._v("ArrayList")]),v._v(" 更新内部的数组引用指向新的数组，并丢弃旧的数组。")])]),v._v(" "),_("h2",{attrs:{id:"collection-子接口之-set"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口之-set"}},[v._v("#")]),v._v(" Collection 子接口之 Set")]),v._v(" "),_("h4",{attrs:{id:"comparable-接口和-comparator-接口有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#comparable-接口和-comparator-接口有什么区别"}},[v._v("#")]),v._v(" Comparable 接口和 Comparator 接口有什么区别？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Comparable")]),v._v(" 接口实际上是出自 "),_("code",[v._v("java.lang")]),v._v(" 包 它有一个 "),_("code",[v._v("compareTo(Object obj)")]),v._v(" 方法用来排序。")]),v._v(" "),_("li",[_("code",[v._v("Comparator")]),v._v(" 接口实际上是出自 "),_("code",[v._v("java.util")]),v._v(" 包它有一个 "),_("code",[v._v("compare(Object obj1, Object obj2)")]),v._v(" 方法用来排序。")])]),v._v(" "),_("h4",{attrs:{id:"无序性和不可重复性的含义是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#无序性和不可重复性的含义是什么"}},[v._v("#")]),v._v(" 无序性和不可重复性的含义是什么？")]),v._v(" "),_("ul",[_("li",[v._v("无序性不等于随机性，无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。")]),v._v(" "),_("li",[v._v("不可重复性是指添加的元素按照 "),_("code",[v._v("equals()")]),v._v(" 判断时，返回 "),_("code",[v._v("false")]),v._v("，需要同时重写 "),_("code",[v._v("equals()")]),v._v(" 方法和 "),_("code",[v._v("hashCode()")]),v._v(" 方法。")])]),v._v(" "),_("h4",{attrs:{id:"比较-hashset、linkedhashset、treeset-的异同"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#比较-hashset、linkedhashset、treeset-的异同"}},[v._v("#")]),v._v(" 比较 HashSet、LinkedHashSet、TreeSet 的异同？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("HashSet")]),v._v("、"),_("code",[v._v("LinkedHashSet")]),v._v(" 和 "),_("code",[v._v("TreeSet")]),v._v(" 都是 "),_("code",[v._v("Set")]),v._v(" 接口的实现类，都能保证元素唯一，并且都不是线程安全的。")]),v._v(" "),_("li",[_("code",[v._v("HashSet")]),v._v("、"),_("code",[v._v("LinkedHashSet")]),v._v(" 和 "),_("code",[v._v("TreeSet")]),v._v(" 的主要区别在于底层数据结构不同。"),_("code",[v._v("HashSet")]),v._v(" 的底层数据结构是哈希表（基于 "),_("code",[v._v("HashMap")]),v._v(" 实现）。"),_("code",[v._v("LinkedHashSet")]),v._v(" 的底层数据结构是链表和哈希表，元素的插入和取出顺序满足 FIFO。"),_("code",[v._v("TreeSet")]),v._v(" 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。")]),v._v(" "),_("li",[v._v("底层数据结构不同又导致这三者的应用场景不同。"),_("code",[v._v("HashSet")]),v._v(" 用于不需要保证元素插入和取出顺序的场景，"),_("code",[v._v("LinkedHashSet")]),v._v(" 用于保证元素的插入和取出顺序满足 FIFO 的场景，"),_("code",[v._v("TreeSet")]),v._v(" 用于支持对元素自定义排序规则的场景。")])]),v._v(" "),_("h2",{attrs:{id:"collection-子接口之-queue"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口之-queue"}},[v._v("#")]),v._v(" Collection 子接口之 Queue")]),v._v(" "),_("h4",{attrs:{id:"queue-和-deque-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#queue-和-deque-的区别"}},[v._v("#")]),v._v(" Queue 和 Deque 的区别？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Queue")]),v._v(" 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循先进先出（FIFO）规则。"),_("code",[v._v("Deque")]),v._v(" 是双端队列，在队列的两端均可以插入或删除元素。")]),v._v(" "),_("li",[_("code",[v._v("Deque")]),v._v(" 扩展了 "),_("code",[v._v("Queue")]),v._v(" 的接口, 增加了在队首和队尾进行插入和删除的方法，如 "),_("code",[v._v("addFirst()")]),v._v("、"),_("code",[v._v("addLast()")]),v._v("。")])]),v._v(" "),_("h4",{attrs:{id:"arraydeque-和-linkedlist-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque-和-linkedlist-的区别"}},[v._v("#")]),v._v(" ArrayDeque 和 LinkedList 的区别？")]),v._v(" "),_("p",[_("code",[v._v("ArrayDeque")]),v._v(" 和 "),_("code",[v._v("LinkedList")]),v._v(" 都实现了 "),_("code",[v._v("Deque")]),v._v(" 接口，两者都具有队列的功能，主要区别如下：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("ArrayDeque")]),v._v(" 是基于可变长的数组和双指针来实现，而 "),_("code",[v._v("LinkedList")]),v._v(" 则通过链表来实现。")]),v._v(" "),_("li",[_("code",[v._v("ArrayDeque")]),v._v(" 不支持存储 "),_("code",[v._v("NULL")]),v._v(" 数据，但 "),_("code",[v._v("LinkedList")]),v._v(" 支持。")]),v._v(" "),_("li",[_("code",[v._v("ArrayDeque")]),v._v(" 是在 JDK1.6 才被引入的，而 "),_("code",[v._v("LinkedList")]),v._v(" 早在 JDK1.2 时就已经存在。")]),v._v(" "),_("li",[_("code",[v._v("ArrayDeque")]),v._v(" 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 "),_("code",[v._v("LinkedList")]),v._v(" 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。")])]),v._v(" "),_("h4",{attrs:{id:"说一说-priorityqueue-面试手撕算法出现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说一说-priorityqueue-面试手撕算法出现"}},[v._v("#")]),v._v(" 说一说 PriorityQueue？(面试手撕算法出现)")]),v._v(" "),_("p",[_("code",[v._v("PriorityQueue")]),v._v(" 是在 JDK1.5 中被引入的, 其与 "),_("code",[v._v("Queue")]),v._v(" 的区别在于元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。这里列举其相关的一些要点：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("PriorityQueue")]),v._v(" 利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据。")]),v._v(" "),_("li",[_("code",[v._v("PriorityQueue")]),v._v(" 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。")]),v._v(" "),_("li",[_("code",[v._v("PriorityQueue")]),v._v(" 是非线程安全的，且不支持存储 "),_("code",[v._v("NULL")]),v._v(" 和 "),_("code",[v._v("non-comparable")]),v._v(" 的对象。")]),v._v(" "),_("li",[_("code",[v._v("PriorityQueue")]),v._v(" 默认是小顶堆，但可以接收一个 "),_("code",[v._v("Comparator")]),v._v(" 作为构造参数，从而来自定义元素优先级的先后。")])]),v._v(" "),_("h2",{attrs:{id:"map-接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#map-接口"}},[v._v("#")]),v._v(" Map 接口")]),v._v(" "),_("h4",{attrs:{id:"hashmap-和-hashtable-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashtable-的区别"}},[v._v("#")]),v._v(" HashMap 和 HashTable 的区别？")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("线程是否安全")]),v._v("："),_("code",[v._v("HashMap")]),v._v(" 是非线程安全的，"),_("code",[v._v("HashTable")]),v._v(" 是线程安全的，因为 "),_("code",[v._v("HashTable")]),v._v(" 内部的方法基本都经过 "),_("code",[v._v("Synchronized")]),v._v(" 修饰。")]),v._v(" "),_("li",[_("strong",[v._v("效率")]),v._v("：因为线程安全的问题，"),_("code",[v._v("HashMap")]),v._v(" 比 "),_("code",[v._v("HashTable")]),v._v(" 效率高一点。")]),v._v(" "),_("li",[_("strong",[v._v("对 Null Key 和 Null value 的支持")]),v._v("："),_("code",[v._v("HashMap")]),v._v(" 可以存储 "),_("code",[v._v("null")]),v._v(" 的 "),_("code",[v._v("key")]),v._v(" 和 "),_("code",[v._v("value")]),v._v("，但 "),_("code",[v._v("null")]),v._v(" 作为键只能有一个，"),_("code",[v._v("null")]),v._v(" 作为值可以有多个；"),_("code",[v._v("Hashtable")]),v._v(" 不允许有 "),_("code",[v._v("null")]),v._v(" 键和 "),_("code",[v._v("null")]),v._v(" 值，否则会抛出 "),_("code",[v._v("NullPointerException")]),v._v("。")]),v._v(" "),_("li",[_("strong",[v._v("初始容量大小和每次扩充容量大小的不同")]),v._v("：一、创建时如果不指定容量初始值，"),_("code",[v._v("HashTable")]),v._v(" 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。"),_("code",[v._v("HashMap")]),v._v(" 默认的初始化大小为 16，之后每次扩充，容量变为原来的 2 倍。二、创建时如果给定了容量初始值，那么 "),_("code",[v._v("HashTable")]),v._v(" 会直接使用你给定的大小，而 "),_("code",[v._v("HashMap")]),v._v(" 会将其扩充为 2 的幂次方大小。也就是说 "),_("code",[v._v("HashMap")]),v._v(" 总是使用 2 的幂作为哈希表的大小。")]),v._v(" "),_("li",[_("strong",[v._v("底层数据结构")]),v._v("：JDK1.8 以后的 "),_("code",[v._v("HashMap")]),v._v(" 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树），以减少搜索时间。"),_("code",[v._v("HashTable")]),v._v(" 没有这样的机制。")])]),v._v(" "),_("h4",{attrs:{id:"hashmap-和-hashset-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashset-的区别"}},[v._v("#")]),v._v(" HashMap 和 HashSet 的区别？")]),v._v(" "),_("p",[_("code",[v._v("HashSet")]),v._v(" 底层就是基于 "),_("code",[v._v("HashMap")]),v._v(" 实现的，在底层实现上区别不大。")]),v._v(" "),_("h4",{attrs:{id:"hashmap-和-treemap-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-treemap-的区别"}},[v._v("#")]),v._v(" HashMap 和 TreeMap 的区别？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("TreeMap")]),v._v(" 和 "),_("code",[v._v("HashMap")]),v._v(" 都继承自 "),_("code",[v._v("AbstractMap")]),v._v("，但是需要注意的是 "),_("code",[v._v("TreeMap")]),v._v(" 它还实现了 "),_("code",[v._v("NavigableMap")]),v._v(" 接口和 "),_("code",[v._v("SortedMap")]),v._v(" 接口。")]),v._v(" "),_("li",[v._v("实现 "),_("code",[v._v("NavigableMap")]),v._v(" 接口让 "),_("code",[v._v("TreeMap")]),v._v(" 有了对集合内元素搜索的能力。")]),v._v(" "),_("li",[v._v("实现 "),_("code",[v._v("SortedMap")]),v._v(" 接口让 "),_("code",[v._v("TreeMap")]),v._v(" 有了对集合内元素根据键排序的能力，默认是按 key 的升序排序，不过也可以指定排序的比较器。")])]),v._v(" "),_("h4",{attrs:{id:"hashset-如何检查重复"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashset-如何检查重复"}},[v._v("#")]),v._v(" HashSet 如何检查重复？")]),v._v(" "),_("p",[v._v("当你把对象加入 "),_("code",[v._v("HashSet")]),v._v(" 时，"),_("code",[v._v("HashSet")]),v._v(" 会先计算对象的 "),_("code",[v._v("hashcode")]),v._v(" 值来判断对象加入的位置，同时也会与其他加入的对象的 "),_("code",[v._v("hashcode")]),v._v(" 值作比较，如果没有相符的 "),_("code",[v._v("hashcode")]),v._v("，"),_("code",[v._v("HashSet")]),v._v(" 会假设对象没有重复出现。但是如果发现有相同 "),_("code",[v._v("hashcode")]),v._v(" 值的对象，这时会调用 "),_("code",[v._v("equals()")]),v._v(" 方法来检查 "),_("code",[v._v("hashcode")]),v._v(" 相等的对象是否真的相同。如果两者相同，"),_("code",[v._v("HashSet")]),v._v(" 就不会让加入操作成功。")]),v._v(" "),_("p",[v._v("因为 "),_("code",[v._v("HashSet")]),v._v(" 实际是通过 "),_("code",[v._v("HashMap")]),v._v(" 实现的，在 JDK1.8 中，"),_("code",[v._v("HashSet")]),v._v(" 的 "),_("code",[v._v("add()")]),v._v(" 方法只是简单的调用了 "),_("code",[v._v("HashMap")]),v._v(" 的 "),_("code",[v._v("put()")]),v._v(" 方法，并且判断了一下返回值以确保是否有重复元素。")]),v._v(" "),_("h4",{attrs:{id:"hashmap-的底层实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的底层实现"}},[v._v("#")]),v._v(" HashMap 的底层实现？")]),v._v(" "),_("p",[v._v("JDK1.8 之前 "),_("code",[v._v("HashMap")]),v._v(" 底层是 "),_("strong",[v._v("数组和链表")]),v._v(" 结合在一起使用也就是 "),_("strong",[v._v("链表散列")]),v._v("。"),_("code",[v._v("HashMap")]),v._v(" 通过 key 的 "),_("code",[v._v("hashcode")]),v._v(" 经过扰动函数处理过后得到 "),_("code",[v._v("hash")]),v._v(" 值，然后通过 "),_("code",[v._v("(n - 1) & hash")]),v._v(" 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 "),_("code",[v._v("hash")]),v._v(" 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。所谓扰动函数指的就是 "),_("code",[v._v("HashMap")]),v._v(" 的 "),_("code",[v._v("hash")]),v._v(" 方法。使用 "),_("code",[v._v("hash")]),v._v(" 方法也就是扰动函数是为了防止一些实现比较差的 "),_("code",[v._v("hashCode()")]),v._v(" 方法 换句话说使用扰动函数之后可以减少碰撞。")]),v._v(" "),_("h4",{attrs:{id:"hashmap-的长度为什么是-2-的幂次方"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的长度为什么是-2-的幂次方"}},[v._v("#")]),v._v(" HashMap 的长度为什么是 2 的幂次方？")]),v._v(" "),_("h4",{attrs:{id:"hashmap-多线程操作会导致死循环问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-多线程操作会导致死循环问题"}},[v._v("#")]),v._v(" HashMap 多线程操作会导致死循环问题？")]),v._v(" "),_("h4",{attrs:{id:"hashmap-由哪几种常见的遍历方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-由哪几种常见的遍历方法"}},[v._v("#")]),v._v(" HashMap 由哪几种常见的遍历方法？")]),v._v(" "),_("h4",{attrs:{id:"concurrenthashmap-和-hashtable-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-和-hashtable-的区别"}},[v._v("#")]),v._v(" ConcurrentHashMap 和 HashTable 的区别？")]),v._v(" "),_("h4",{attrs:{id:"concurrenthashmap-线程安全的具体实现方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-线程安全的具体实现方式"}},[v._v("#")]),v._v(" ConcurrentHashMap 线程安全的具体实现方式？")]),v._v(" "),_("h4",{attrs:{id:"jdk1-7-和-jdk1-8-的-concurrenthashmap-有什么不同"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-7-和-jdk1-8-的-concurrenthashmap-有什么不同"}},[v._v("#")]),v._v(" JDK1.7 和 JDK1.8 的 ConcurrentHashMap 有什么不同？")])])}),[],!1,null,null,null);_.default=t.exports}}]);