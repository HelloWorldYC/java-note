(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{302:function(t,r,s){t.exports=s.p+"assets/img/字符串拼接底层原理—没有变量参与时.8c8523d1.png"},303:function(t,r,s){t.exports=s.p+"assets/img/字符串拼接底层原理—等号右边有变量参与时.e1987069.png"},304:function(t,r,s){t.exports=s.p+"assets/img/StringBuilder存储原理.0ac54a22.png"},305:function(t,r,s){t.exports=s.p+"assets/img/字符串拼接例子.357315c9.png"},306:function(t,r,s){t.exports=s.p+"assets/img/字符串拼接例子二.2d9fe6c1.png"},307:function(t,r,s){t.exports=s.p+"assets/img/StringBuilder默认存储机制.df3a308e.png"},446:function(t,r,s){"use strict";s.r(r);var i=s(4),a=Object(i.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"字符串原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串原理"}},[t._v("#")]),t._v(" 字符串原理")]),t._v(" "),r("h3",{attrs:{id:"字符串存储的内存原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串存储的内存原理"}},[t._v("#")]),t._v(" 字符串存储的内存原理")]),t._v(" "),r("ul",[r("li",[t._v("直接赋值会复用字符串常量池中的")]),t._v(" "),r("li",[t._v("new 出来的不会复用，而是开辟一个新的空间")])]),t._v(" "),r("h3",{attrs:{id:"号比较的是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#号比较的是什么"}},[t._v("#")]),t._v(" ==号比较的是什么")]),t._v(" "),r("ul",[r("li",[t._v("基本数据类型比较数据值")]),t._v(" "),r("li",[t._v("引用数据类型比较地址值")])]),t._v(" "),r("h3",{attrs:{id:"字符串拼接的底层原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串拼接的底层原理"}},[t._v("#")]),t._v(" 字符串拼接的底层原理")]),t._v(" "),r("ul",[r("li",[t._v("等号右边没有变量参与拼接时")])]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:s(302),width:"100%"}})]),t._v(" "),r("ul",[r("li",[t._v("等号右边有变量参与拼接时(JDK7及JDK7以前)")])]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:s(303),width:"100%"}})]),t._v(" "),r("p",[t._v("在JDK8以后进行字符串拼接时，程序先预估需要拼接的字符串的长度创建了一个数组来存储，最后再将数组变为字符串。"),r("br"),t._v("\n结论：")]),t._v(" "),r("ul",[r("li",[t._v("如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串池中的字符串")]),t._v(" "),r("li",[t._v("如果有变量参与，每一行拼接的代码，都会在内存中创建新的字符串，浪费内存")])]),t._v(" "),r("p",[t._v("建议：如果很多字符串变量拼接，不要直接+。在底层会创建多个对象，浪费时间，浪费性能。")]),t._v(" "),r("h3",{attrs:{id:"stringbuilder-类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder-类"}},[t._v("#")]),t._v(" StringBuilder 类")]),t._v(" "),r("p",[t._v("StringBuilder 是 java 已经写好的类，java 在底层对其做了一些特殊处理，打印对象不是地址值而是属性值。")]),t._v(" "),r("h3",{attrs:{id:"stringbuilder-提高效率原理图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder-提高效率原理图"}},[t._v("#")]),t._v(" StringBuilder 提高效率原理图")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:s(304),width:"100%"}})]),t._v(" "),r("ul",[r("li",[t._v("所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存")])]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:s(305),width:"100%"}})]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:s(306),width:"100%"}})]),t._v(" "),r("h3",{attrs:{id:"stringbuilder源码分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder源码分析"}},[t._v("#")]),t._v(" StringBuilder源码分析")]),t._v(" "),r("div",{attrs:{align:"left"}},[r("img",{attrs:{src:s(307),width:"60%"}})])])}),[],!1,null,null,null);r.default=a.exports}}]);