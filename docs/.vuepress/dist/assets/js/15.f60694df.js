(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{350:function(t,s,a){t.exports=a.p+"assets/img/单列集合.73f83d50.png"},351:function(t,s,a){t.exports=a.p+"assets/img/Collection集合常用方法.690326fe.png"},352:function(t,s,a){t.exports=a.p+"assets/img/迭代器遍历.bd807705.png"},353:function(t,s,a){t.exports=a.p+"assets/img/List集合特有方法.7c9568fd.png"},354:function(t,s,a){t.exports=a.p+"assets/img/ArrayList集合底层原理.483dbda2.png"},355:function(t,s,a){t.exports=a.p+"assets/img/ArrayList第一次扩容的情况.3c69de1a.png"},356:function(t,s,a){t.exports=a.p+"assets/img/ArrayList后续扩容的情况.00524258.png"},357:function(t,s,a){t.exports=a.p+"assets/img/LinkedList集合特有API.3e61f5e4.png"},358:function(t,s,a){t.exports=a.p+"assets/img/LinkedList底层源码.b2fd0177.png"},359:function(t,s,a){t.exports=a.p+"assets/img/迭代器底层源码分析.21e23473.png"},360:function(t,s,a){t.exports=a.p+"assets/img/HashSet底层原理.d83a940c.png"},361:function(t,s,a){t.exports=a.p+"assets/img/LinkedHashSet底层原理.ef7232bd.png"},362:function(t,s,a){t.exports=a.p+"assets/img/五种集合的应用场景.b258587a.png"},459:function(t,s,a){"use strict";a.r(s);var n=a(8),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),s("h3",{attrs:{id:"单列集合体系结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单列集合体系结构"}},[t._v("#")]),t._v(" 单列集合体系结构")]),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(350),width:"100%"}})]),t._v(" "),s("ul",[s("li",[t._v("List系列集合：添加的元素是有序的（指存和取的顺序一样）、可重复的、有索引的。")]),t._v(" "),s("li",[t._v("Set系列集合：添加的元素是无序（指存和取的顺序不一定一样）、不重复、无索引（不能通过索引获取元素）。")])]),t._v(" "),s("p",[t._v("Collection：Collection是单列集合的祖宗"),s("strong",[t._v("接口")]),t._v("，它的功能是全部单列集合都可以继承使用的。\n")]),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(351),width:"100%"}})]),s("p"),t._v(" "),s("ul",[s("li",[t._v("Collection集合遍历方式\n"),s("ul",[s("li",[t._v("迭代器遍历：在遍历过程中需要删除元素，请使用迭代器")]),t._v(" "),s("li",[t._v("增强for遍历：仅仅想遍历")]),t._v(" "),s("li",[t._v("Lambda表达式遍历：仅仅想遍历")])])])]),t._v(" "),s("h3",{attrs:{id:"迭代器遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器遍历"}},[t._v("#")]),t._v(" 迭代器遍历")]),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(352),width:"100%"}})]),t._v(" "),s("ul",[s("li",[t._v("1.当强行获取超出索引的元素，会报错NoSuchElementException")]),t._v(" "),s("li",[t._v("2.迭代器遍历完毕，指针不会复位")]),t._v(" "),s("li",[t._v("3.循环中只能用一次next方法")]),t._v(" "),s("li",[t._v("4.迭代器遍历集合时不依赖索引，不能用集合的方法进行增加或者删除，删除可以用迭代器提供的方法remove()进行删除")])]),t._v(" "),s("h3",{attrs:{id:"增强for遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#增强for遍历"}},[t._v("#")]),t._v(" 增强for遍历")]),t._v(" "),s("ul",[s("li",[t._v("增强for的底层就是迭代器，为了简化迭代器的代码书写的。")]),t._v(" "),s("li",[t._v("它是JDK5之后才出现的，其内部原理就是一个Iterator迭代器")]),t._v(" "),s("li",[t._v("所有的单列集合和数组才能用增强for进行遍历，双列集合不能用增强for遍历")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("元素的数据类型 变量名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 数组或者集合"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("增强for细节：\n"),s("ul",[s("li",[t._v("修改增强for中的第三方变量，不会改变集合中原本的数据。")])])])]),t._v(" "),s("h3",{attrs:{id:"lambda表达式遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda表达式遍历"}},[t._v("#")]),t._v(" Lambda表达式遍历")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Consumer")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ncoll"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Consumer")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Lambda表达式形式")]),t._v("\ncoll"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*forEach底层原理：遍历集合，依次得到每一个元素，把得到的每一个元素，传递给accept方法，s依次表示集合中的每一个数据*/")]),t._v("\n")])])]),s("h3",{attrs:{id:"list集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list集合"}},[t._v("#")]),t._v(" List集合")]),t._v(" "),s("ul",[s("li",[t._v("有序：存和取的元素顺序一致")]),t._v(" "),s("li",[t._v("有索引：可以通过索引操作元素")]),t._v(" "),s("li",[t._v("可重复：存储的元素可以重复")]),t._v(" "),s("li",[t._v("Collection的方法List都继承了")]),t._v(" "),s("li",[t._v("List集合因为有索引，所以多了很多索引操作的方法")])]),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(353),width:"100%"}})]),t._v(" "),s("p",[s("strong",[t._v("注意：在调用方法时，如果方法出现了重载现象，优先调用实参和形参类型一致的那个方法")])]),t._v(" "),s("p",[t._v("List集合有五种遍历方式：")]),t._v(" "),s("ul",[s("li",[t._v("迭代器：在遍历过程中需要删除元素，请使用迭代器")]),t._v(" "),s("li",[t._v("列表迭代器（ListIterator，属于Iterator的子接口，add方法可以在遍历过程中添加元素）：在遍历过程中需要添加元素，请使用列表迭代器")]),t._v(" "),s("li",[t._v("增强for：仅仅想遍历")]),t._v(" "),s("li",[t._v("Lambda表达式：仅仅想遍历")]),t._v(" "),s("li",[t._v("普通for（结合size方法和get方法以及循环）：遍历时想操作索引，可以用普通for")])]),t._v(" "),s("h3",{attrs:{id:"arraylist集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist集合"}},[t._v("#")]),t._v(" ArrayList集合")]),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(354),width:"80%"}})]),t._v(" "),s("p",[t._v("其中变量size既表示集合中元素的个数，也表示下一个元素应存储的位置。")]),t._v(" "),s("ul",[s("li",[t._v("ArrayList底层第一次扩容的情况。\n"),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(355),width:"100%"}})])]),t._v(" "),s("li",[t._v("ArrayList底层后续扩容的情况\n"),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(356),width:"100%"}})])])]),t._v(" "),s("h3",{attrs:{id:"linkedlist集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist集合"}},[t._v("#")]),t._v(" LinkedList集合")]),t._v(" "),s("ul",[s("li",[t._v("底层数据结构是"),s("strong",[t._v("双链表")]),t._v("，查询慢，增删快，但是如果操作的是首尾元素，速度也是极快的。")]),t._v(" "),s("li",[t._v("LinkedList本身多了很多直接操作"),s("strong",[t._v("首尾元素")]),t._v("的特有API。\n"),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(357),width:"100%"}})]),s("br"),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(358),width:"100%"}})])])]),t._v(" "),s("h3",{attrs:{id:"迭代器底层源码分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器底层源码分析"}},[t._v("#")]),t._v(" 迭代器底层源码分析")]),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(359),width:"100%"}})]),t._v(" "),s("h3",{attrs:{id:"set集合的实现类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set集合的实现类"}},[t._v("#")]),t._v(" Set集合的实现类")]),t._v(" "),s("ul",[s("li",[t._v("HashSet：无序、不重复、无索引")]),t._v(" "),s("li",[t._v("LinkedHashSet："),s("strong",[t._v("有序")]),t._v("、不重复、无索引")]),t._v(" "),s("li",[t._v("TreeSet："),s("strong",[t._v("可排序")]),t._v("、不重复、无索引")])]),t._v(" "),s("p",[s("strong",[t._v("Set接口中的方法上基本上与Collection的API一致。")])]),t._v(" "),s("h3",{attrs:{id:"hashset底层原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashset底层原理"}},[t._v("#")]),t._v(" HashSet底层原理")]),t._v(" "),s("ul",[s("li",[t._v("HashSet：无序、不重复、无索引")]),t._v(" "),s("li",[t._v("HashSet集合底层采取"),s("strong",[t._v("哈希表")]),t._v("存储数据")]),t._v(" "),s("li",[t._v("哈希表是一种对于增删改查数据性能都较好的结构")]),t._v(" "),s("li",[t._v("哈希表组成\n"),s("ul",[s("li",[t._v("JDK8以前："),s("strong",[t._v("数组+链表")])]),t._v(" "),s("li",[t._v("JDK8开始："),s("strong",[t._v("数组+链表+红黑树")])])])]),t._v(" "),s("li",[s("strong",[t._v("哈希值")]),t._v("：对象的整数表现形式\n"),s("ul",[s("li",[t._v("根据hashCode方法计算出来的int类型的整数")]),t._v(" "),s("li",[t._v("该方法定义在Object类中，所有对象都可以调用，默认使用地址值进行计算")]),t._v(" "),s("li",[t._v("一般情况下，会重写hashCode方法，利用对象内部的属性值计算哈希值")])])]),t._v(" "),s("li",[t._v("对象的哈希值特点：\n"),s("ul",[s("li",[t._v("如果没有重写hashCode方法，不同对象计算出的哈希值是不同的，因为地址不同")]),t._v(" "),s("li",[t._v("如果已经重写了hashCode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的")]),t._v(" "),s("li",[t._v("在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能是一样的（哈希碰撞）\n"),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:a(360),width:"70%"}})])])])])]),t._v(" "),s("p",[t._v("细节：")]),t._v(" "),s("ul",[s("li",[t._v("JDK8以后，当链表长度"),s("strong",[t._v("超过8")]),t._v("，而且数组长度"),s("strong",[t._v("大于等于64")]),t._v("时，自动转换为红黑树")]),t._v(" "),s("li",[t._v("如果集合中存储的是自定义对象，必须要重写"),s("strong",[t._v("hashCode")]),t._v("和"),s("strong",[t._v("equals")]),t._v("方法")])]),t._v(" "),s("p",[t._v("总结：")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("HashSet集合的底层数据结构是什么样的？")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("HashSet添加元素的过程？")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("HashSet为什么存和取的顺序不一样？")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("HashSet为什么没有索引？")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("HashSet是利用什么机制保证去重的？")])])])]),t._v(" "),s("h3",{attrs:{id:"linkedhashset底层原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset底层原理"}},[t._v("#")]),t._v(" LinkedHashSet底层原理")]),t._v(" "),s("ul",[s("li",[t._v("LinkedHashSet："),s("strong",[t._v("有序")]),t._v("、不重复、无索引\n"),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(361),width:"100%"}})])])]),t._v(" "),s("h3",{attrs:{id:"treeset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[t._v("#")]),t._v(" TreeSet")]),t._v(" "),s("ul",[s("li",[t._v("TreeSet："),s("strong",[t._v("可排序")]),t._v("、不重复、无索引")]),t._v(" "),s("li",[s("strong",[t._v("可排序")]),t._v("：按照元素的默认规则（由小到大）排序。")]),t._v(" "),s("li",[t._v("TreeSet集合底层是基于"),s("strong",[t._v("红黑树的数据结构")]),t._v("实现排序的，增删改查性能都较好。")]),t._v(" "),s("li",[t._v("默认的规则\n"),s("ul",[s("li",[t._v("对于数值类型：Integer，Double，默认按照从小到大的顺序进行排序")]),t._v(" "),s("li",[t._v("对于字符、字符串类型：按照字符在ASCII码表中的数字升序进行排序")]),t._v(" "),s("li",[t._v("对于自定义引用数据类型，有两种比较方式：\n"),s("ul",[s("li",[t._v("方式一："),s("strong",[t._v("默认排序/自然排序")]),t._v("：Javabean类实现Comparable接口指定比较规则")]),t._v(" "),s("li",[t._v("方式二："),s("strong",[t._v("比较器排序")]),t._v("：创建TreeSet对象时候，传递比较器Comparator指定规则")]),t._v(" "),s("li",[s("strong",[t._v("使用原则")]),t._v("：默认使用第一种，如果第一种不能满足当前需求，就使用第二种")]),t._v(" "),s("li",[t._v("注意：若方式一和方式二同时存在，运行时以方式二为准")])])]),t._v(" "),s("li",[t._v("方法返回值的特点：\n"),s("ul",[s("li",[t._v("负数：表示当前要添加的元素是小的，存左边")]),t._v(" "),s("li",[t._v("正数：表示当前要添加的元素是大的，存右边")]),t._v(" "),s("li",[t._v("0：表示当前要添加的元素已经存在，舍弃\n"),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:a(362),width:"100%"}})])])])])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);