(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{495:function(t,a,e){"use strict";e.r(a);var s=e(8),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"beanpostprocessor-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beanpostprocessor-接口"}},[t._v("#")]),t._v(" "),a("code",[t._v("BeanPostProcessor")]),t._v(" 接口")]),t._v(" "),a("p",[a("code",[t._v("BeanPostProcessor")]),t._v(" 接口是 "),a("code",[t._v("Spring")]),t._v(" 框架中的一个重要接口，用于在 Bean 的实例化和初始化过程中进行扩展和自定义操作。")]),t._v(" "),a("p",[t._v("该接口定义了两个方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("postProcessBeforeInitialization(Object bean, String beanName)")]),t._v(": 在 Bean 初始化之前调用，允许对 Bean 进行修改或自定义处理。在该方法中，可以对 Bean 进行一些预处理操作，例如属性赋值、属性注入等。")]),t._v(" "),a("li",[a("code",[t._v("postProcessAfterInitialization(Object bean, String beanName)")]),t._v(": 在 Bean 初始化之后调用，允许对 Bean 进行修改或自定义处理。在该方法中，可以对 Bean 进行一些后处理操作，例如添加代理、包装等。")])]),t._v(" "),a("p",[a("code",[t._v("BeanPostProcessor")]),t._v(" 接口的实现类可以注册到 Spring 容器中，并将在每个 Bean 的实例化和初始化过程中被调用。通过实现该接口的方法，我们可以对 Bean 进行一些额外的处理，例如对特定注解的解析、添加自定义逻辑等。"),a("br"),t._v("\n要启用自定义的 "),a("code",[t._v("BeanPostProcessor")]),t._v(" 实现类，需要将其注册到 Spring 容器中。需要注意的是，"),a("code",[t._v("BeanPostProcessor")]),t._v(" 对所有的 Bean 实例都会生效，因此在实现时需要考虑只对特定的 Bean 类型或特定条件下的 Bean 进行处理。")]),t._v(" "),a("h3",{attrs:{id:"项目中实现-beanpostprocessor-接口的目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目中实现-beanpostprocessor-接口的目的"}},[t._v("#")]),t._v(" 项目中实现 "),a("code",[t._v("BeanPostProcessor")]),t._v(" 接口的目的")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("postProcessBeforeInitialization")]),t._v("：这个方法主要用于服务端上的，用于检测是否是提供服务的 bean，如果是提供服务的 bean，则在服务的 bean 提供服务之前先将 bean 注册到 zookeeper 上。")]),t._v(" "),a("li",[a("code",[t._v("postProcessAfterInitialization")]),t._v("：这个方法主要用在客户端的，在 bean 初始化之后自动将该 bean 注入到使用该 bean 的地方，自动依赖注入，作用就是将要远程调用方法的对象替换为其代理对象，屏蔽远程调用底层细节（包括网络传输和代理对象的细节）。")])]),t._v(" "),a("h2",{attrs:{id:"rpcservice-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rpcservice-注解"}},[t._v("#")]),t._v(" "),a("code",[t._v("@RpcService")]),t._v(" 注解")]),t._v(" "),a("p",[a("code",[t._v("@RpcService")]),t._v(" 注解是进行服务注释的，标记在服务实现类上，表示这个该实现类是一个服务。该注解中有两个成员变量："),a("code",[t._v("version")]),t._v(" 和 "),a("code",[t._v("group")]),t._v("，则标记了该注解的类就可以统一获得这两个变量，不用在每个服务实现类中单独定义。")]),t._v(" "),a("h3",{attrs:{id:"注解类中变量的定义方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解类中变量的定义方式"}},[t._v("#")]),t._v(" 注解类中变量的定义方式")]),t._v(" "),a("p",[t._v("在注解类中，成员变量的定义方式与普通类的成员变量有所不同。注解类中的成员变量被称为注解的元素，并且具有以下特点：")]),t._v(" "),a("ul",[a("li",[t._v("成员变量必须以无参数的方法形式声明，即没有参数和方法体。这些方法被称为注解元素的获取方法或访问方法。")]),t._v(" "),a("li",[t._v("成员变量可以包含默认值，使用 default 关键字指定默认值。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RpcService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 服务版本，默认是空字符串\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 服务的 group，默认是空字符串\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对注解中的元素进行赋值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RpcService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("version "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" group "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"group1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"注解定义时的各个注解作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解定义时的各个注解作用"}},[t._v("#")]),t._v(" 注解定义时的各个注解作用")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@Documented")]),t._v("：该注解用于指示标记的注解应该包含在生成的文档中。当使用 "),a("code",[t._v("javadoc")]),t._v(" 工具生成文档时，带有 "),a("code",[t._v("@Documented")]),t._v(" 注解的注解会在文档中显示，以提供更详细的说明和信息。")]),t._v(" "),a("li",[a("code",[t._v("@Retention(RetentionPolicy.RUNTIME)")]),t._v("：该注解用于指定被标记的注解在运行时可见。"),a("code",[t._v("RetentionPolicy.RUNTIME")]),t._v(" 表示注解信息将在运行时保留，因此可以通过反射机制来访问和处理注解信息。")]),t._v(" "),a("li",[a("code",[t._v("@Target({ElementType.FIELD})")]),t._v("：该注解用于指定被标记的注解仅可用于字段（成员变量）。"),a("code",[t._v("ElementType.FIELD")]),t._v(" 表示注解只能应用于类的字段。")]),t._v(" "),a("li",[a("code",[t._v("@Inherited")]),t._v("：该注解用于指示被标记的注解是否可以被继承。如果一个类标记了一个带有 "),a("code",[t._v("@Inherited")]),t._v(" 注解的注解，那么子类也会继承该注解。但是，这仅适用于类级别的注解，对于方法或字段级别的注解不起作用。")]),t._v(" "),a("li",[a("code",[t._v("@Import")]),t._v("：该注解可以用于在配置类中导入其他的组件或配置类。当使用 "),a("code",[t._v("@Import")]),t._v(" 注解时，被导入的类（或配置类）将被实例化并添加到 Spring context 中作为 bean。")])]),t._v(" "),a("h3",{attrs:{id:"注解实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解实例"}},[t._v("#")]),t._v(" 注解实例")]),t._v(" "),a("p",[t._v("注解本身是没有直接获取实例的能力的。但可以通过使用 "),a("code",[t._v("getAnnotation()")]),t._v(" 方法来获取应用于该元素上的特定注解的实例，从而获取注解中定义的元素。")]),t._v(" "),a("h2",{attrs:{id:"filed-字段的常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filed-字段的常用方法"}},[t._v("#")]),t._v(" Filed 字段的常用方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("getName()")]),t._v("：获取字段的名称。")]),t._v(" "),a("li",[a("code",[t._v("getType()")]),t._v("：获取字段的类型，返回一个 "),a("code",[t._v("Class")]),t._v(" 对象表示字段的类型。")]),t._v(" "),a("li",[a("code",[t._v("getModifiers()")]),t._v("：获取字段的修饰符，返回一个整数值，表示字段的修饰符，可以使用 "),a("code",[t._v("Modifier")]),t._v(" 类中的方法进行解析。")]),t._v(" "),a("li",[a("code",[t._v("isAccessible()")]),t._v("：判断字段是否可以访问，返回一个布尔值，表示字段是否可以通过反射进行访问。")]),t._v(" "),a("li",[a("code",[t._v("setAccessible(boolean flag)")]),t._v("：设置字段的可访问性，即使字段是私有的或受限制的，也可以通过设置可访问性来绕过访问限制。")]),t._v(" "),a("li",[a("code",[t._v("get(Object obj)")]),t._v("：获取指定对象中字段的值，返回字段的值。如果字段是静态字段，则 "),a("code",[t._v("obj")]),t._v(" 参数可以为 "),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("set(Object obj, Object value)")]),t._v("：设置指定对象中字段的值。")]),t._v(" "),a("li",[a("code",[t._v("getAnnotation(Class<T> annotationClass)")]),t._v("：获取指定类型的注解对象，如果字段上应用了指定类型的注解，则返回该注解的实例。")]),t._v(" "),a("li",[a("code",[t._v("isAnnotationPresent(Class<? extends Annotation> annotationClass)")]),t._v("：检查字段是否应用了指定类型的注解，返回一个布尔值。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);