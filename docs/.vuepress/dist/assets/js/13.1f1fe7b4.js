(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{333:function(t,s,v){t.exports=v.p+"assets/img/常见的数据结构.68a695ba.png"},334:function(t,s,v){t.exports=v.p+"assets/img/链表中结点结构.44b40933.png"},335:function(t,s,v){t.exports=v.p+"assets/img/单向链表和双向链表.55ebe27d.png"},336:function(t,s,v){t.exports=v.p+"assets/img/树节点内部组成.fb9c7223.png"},337:function(t,s,v){t.exports=v.p+"assets/img/树的演变.cc376ad1.png"},338:function(t,s,v){t.exports=v.p+"assets/img/二叉查找树.c212c6a8.png"},339:function(t,s,v){t.exports=v.p+"assets/img/平衡二叉树左旋（1）.4b3697ee.png"},340:function(t,s,v){t.exports=v.p+"assets/img/平衡二叉树左旋（2）.f35c844f.png"},341:function(t,s,v){t.exports=v.p+"assets/img/平衡二叉树右旋（1）.44f7b23f.png"},342:function(t,s,v){t.exports=v.p+"assets/img/平衡二叉树右旋（2）.15d59ed3.png"},343:function(t,s,v){t.exports=v.p+"assets/img/平衡二叉树需要旋转的四种情况.d934e5c9.png"},344:function(t,s,v){t.exports=v.p+"assets/img/红黑树红黑规则.2f0a1f3d.png"},345:function(t,s,v){t.exports=v.p+"assets/img/红黑树添加节点的规则.0c3b9a7a.png"},346:function(t,s,v){t.exports=v.p+"assets/img/前序遍历.4867b8c1.png"},347:function(t,s,v){t.exports=v.p+"assets/img/中序遍历.7027c9f0.png"},348:function(t,s,v){t.exports=v.p+"assets/img/后序遍历.13590e48.png"},349:function(t,s,v){t.exports=v.p+"assets/img/层序遍历.d97bc811.png"},458:function(t,s,v){"use strict";v.r(s);var r=v(8),_=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(333),width:"100%"}})]),t._v(" "),s("h3",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),s("p",[t._v("栈的特点："),s("strong",[t._v("后进先出，先进后出")]),s("br"),t._v("\n数据进入栈模型的过程称为："),s("strong",[t._v("压/进栈")]),s("br"),t._v("\n数据离开栈模型的过程称为："),s("strong",[t._v("弹/出栈")])]),t._v(" "),s("h3",{attrs:{id:"队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),s("p",[t._v("队列的特点："),s("strong",[t._v("先进先出，后进后出")]),s("br"),t._v("\n数据从"),s("strong",[t._v("后端")]),t._v("进入队列模型的过程称为："),s("strong",[t._v("入队列")]),s("br"),t._v("\n数据从"),s("strong",[t._v("前端")]),t._v("离开队列模型的过程称为："),s("strong",[t._v("出队列")])]),t._v(" "),s("h3",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("数组的特点：数组是一种"),s("strong",[t._v("查询快，增删慢")]),t._v("的模型")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("查询速度快")]),t._v("：查询数据通过地址值和索引定位，查询任意数据耗时相同。（元素在内存中是连续存储的）")]),t._v(" "),s("li",[s("strong",[t._v("删除效率低")]),t._v("：要将原始数据删除，同时后面每个数据前移")]),t._v(" "),s("li",[s("strong",[t._v("添加效率极低")]),t._v("：添加位置后的每个数据后移，再添加元素")])]),t._v(" "),s("h3",{attrs:{id:"链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),s("p",[t._v("链表中的每个元素称为"),s("strong",[t._v("结点")]),t._v("，每个结点都是独立的对象，在内存中是不连续的，有其独立的存储位置（地址），每个结点包含数据值和下一个结点的地址。"),s("br"),t._v(" "),s("strong",[t._v("链表查询慢，无论查询哪个数据都要从头开始找。")]),s("br"),t._v(" "),s("strong",[t._v("链表增删相对快。")]),s("br")]),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(334),width:"60%"}})]),s("br"),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(335),width:"80%"}})]),s("p"),t._v(" "),s("h3",{attrs:{id:"树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树")]),t._v(" "),s("p",[t._v("专属名词：")]),t._v(" "),s("ul",[s("li",[t._v("节点：都是独立的对象")]),t._v(" "),s("li",[t._v("度：每一个节点的子节点数量，在二叉树中，任意节点的度 <=2")]),t._v(" "),s("li",[t._v("树高：树的总层数")]),t._v(" "),s("li",[t._v("根节点：最顶层的节点")]),t._v(" "),s("li",[t._v("父节点：当前节点的上一节点")]),t._v(" "),s("li",[t._v("左子节点：当前节点左下方的节点")]),t._v(" "),s("li",[t._v("右子节点：当前节点右下方的节点")]),t._v(" "),s("li",[t._v("根节点的左子树：由根节点左子节点扩散出来的子树")]),t._v(" "),s("li",[t._v("根节点的右子树：由根节点右子节点扩散出来的子树\n"),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(336),width:"60%"}})])])]),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(337),width:"60%"}})]),t._v(" "),s("h4",{attrs:{id:"二叉查找树-二叉排序树-二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树-二叉排序树-二叉搜索树"}},[t._v("#")]),t._v(" 二叉查找树（二叉排序树/二叉搜索树）")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[t._v("每一个节点上最多有两个子节点")]),t._v(" "),s("li",[t._v("任意节点左子树上的值都小于当前节点")]),t._v(" "),s("li",[t._v("任意节点右子树上的值都大于当前节点\n"),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(338),width:"60%"}})])])]),t._v(" "),s("p",[t._v("添加规则："),s("strong",[t._v("小的存左边，大的存右边，一样的不存")])]),t._v(" "),s("h4",{attrs:{id:"平衡二叉树-二叉查找树的改进版"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树-二叉查找树的改进版"}},[t._v("#")]),t._v(" 平衡二叉树（二叉查找树的改进版）")]),t._v(" "),s("p",[t._v("规则："),s("strong",[t._v("任意")]),t._v("节点左右子树"),s("strong",[t._v("高度差")]),t._v("不超过1。"),s("br"),t._v("\n平衡二叉树旋转机制：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("规则1：左旋\n")]),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(339),width:"100%"}})]),s("br"),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(340),width:"100%"}})]),s("p")]),t._v(" "),s("li",[s("p",[t._v("规则2：右旋\n")]),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(341),width:"100%"}})]),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(342),width:"100%"}})]),s("p")]),t._v(" "),s("li",[s("p",[t._v("触发时机：当添加一个节点之后，该树不再是一颗平衡二叉树")])]),t._v(" "),s("li",[s("p",[t._v("左左：节点添加在根节点左子树的左子树上，破坏了平衡")])]),t._v(" "),s("li",[s("p",[t._v("左右：节点添加在根节点左子树的右子树上，破坏了平衡")])]),t._v(" "),s("li",[s("p",[t._v("右右：节点添加在根节点右子树的右子树上，破坏了平衡")])]),t._v(" "),s("li",[s("p",[t._v("右左：节点添加在根节点右子树的左子树上，破坏了平衡\n")]),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(343),width:"60%"}})]),s("p")])]),t._v(" "),s("h4",{attrs:{id:"红黑树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),s("ul",[s("li",[t._v("红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构。")]),t._v(" "),s("li",[t._v("1972年出现，当时被称之为平衡二叉B树。后来，1978年被修改为如今的“红黑树”。")]),t._v(" "),s("li",[t._v("它是一种"),s("strong",[t._v("特殊的二叉查找树")]),t._v("，红黑树的每一个节点上都有存储位表示节点的颜色。")]),t._v(" "),s("li",[s("strong",[t._v("每一个节点可以是红或者黑")]),t._v("；红黑树"),s("strong",[t._v("不是高度平衡")]),t._v("的，它的平衡是通过“"),s("strong",[t._v("红黑规则")]),t._v("”进行实现的。")]),t._v(" "),s("li",[t._v("红黑树的"),s("strong",[t._v("增删改查")]),t._v("性能都很好\n"),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(344),width:"100%"}})]),t._v(" "),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(345),width:"100%"}})])])]),t._v(" "),s("h4",{attrs:{id:"二叉树遍历方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树遍历方式"}},[t._v("#")]),t._v(" 二叉树遍历方式")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("前序遍历：从根节点开始，然后按照"),s("strong",[t._v("当前节点，左子节点，右子节点")]),t._v("的顺序遍历\n")]),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(346),width:"80%"}})]),s("p")]),t._v(" "),s("li",[s("p",[t._v("中序遍历（"),s("strong",[t._v("最重要")]),t._v("）：从最左边的子节点开始，然后按照"),s("strong",[t._v("左子节点，当前节点，右子节点")]),t._v("的顺序遍历\n")]),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(347),width:"80%"}})]),s("p")]),t._v(" "),s("li",[s("p",[t._v("后序遍历：从最左边的子节点开始，然后按照"),s("strong",[t._v("左子节点，右子节点，当前节点")]),t._v("的顺序遍历\n")]),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(348),width:"80%"}})]),s("p")]),t._v(" "),s("li",[s("p",[t._v("层序遍历：从根节点开始"),s("strong",[t._v("一层一层的遍历")])]),s("div",{attrs:{align:"left"}},[s("img",{attrs:{src:v(349),width:"80%"}})]),s("p")])]),t._v(" "),s("p",[t._v("记忆方式："),s("strong",[t._v("当前节点")]),t._v("在前、中、后的顺序分为前序、中序、后序，层序就是一层一层遍历")])])}),[],!1,null,null,null);s.default=_.exports}}]);