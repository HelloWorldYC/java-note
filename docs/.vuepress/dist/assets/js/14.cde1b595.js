(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{363:function(t,a,s){t.exports=s.p+"assets/img/单体架构.99468535.png"},364:function(t,a,s){t.exports=s.p+"assets/img/分布式架构.1754b1f2.png"},365:function(t,a,s){t.exports=s.p+"assets/img/微服务基本结构.9c56b14f.png"},366:function(t,a,s){t.exports=s.p+"assets/img/几种常见微服务技术对比.6601807f.png"},367:function(t,a,s){t.exports=s.p+"assets/img/负载均衡流程.322d730e.png"},368:function(t,a,s){t.exports=s.p+"assets/img/IRule接口继承结构.a65f6fa4.png"},369:function(t,a,s){t.exports=s.p+"assets/img/负载均衡部分策略.12b625ae.png"},370:function(t,a,s){t.exports=s.p+"assets/img/Nacos权重配置.47670804.png"},371:function(t,a,s){t.exports=s.p+"assets/img/Nacos注册中心原理细节.f62c2b85.png"},372:function(t,a,s){t.exports=s.p+"assets/img/Nacos统一配置管理添加配置信息.bcf6e820.png"},373:function(t,a,s){t.exports=s.p+"assets/img/Feign自定义配置.10694748.png"},374:function(t,a,s){t.exports=s.p+"assets/img/Feign最佳实践之继承.2e442725.png"},375:function(t,a,s){t.exports=s.p+"assets/img/Feign最佳实践之抽取.78c59814.png"},376:function(t,a,s){t.exports=s.p+"assets/img/gateway之网关服务过程.43219c0d.png"},377:function(t,a,s){t.exports=s.p+"assets/img/断言规则类型.355b1234.png"},378:function(t,a,s){t.exports=s.p+"assets/img/gateway之网关过滤.fb7c0702.png"},458:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"认识微服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识微服务"}},[t._v("#")]),t._v(" 认识微服务")]),t._v(" "),a("h3",{attrs:{id:"单体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单体架构"}},[t._v("#")]),t._v(" 单体架构")]),t._v(" "),a("p",[t._v("单体架构：将业务的所有功能集中在一个项目中开发，打成一个包部署。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(363),width:"100%"}})]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("架构简单")]),t._v(" "),a("li",[t._v("部署成本低")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("耦合度高")]),t._v(" "),a("li",[t._v("扩展性差")])]),t._v(" "),a("h3",{attrs:{id:"分布式架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式架构"}},[t._v("#")]),t._v(" 分布式架构")]),t._v(" "),a("p",[t._v("分布式架构：根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(364),width:"100%"}})]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("降低服务耦合")]),t._v(" "),a("li",[t._v("有利于服务升级拓展")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("架构复杂，难度大")]),t._v(" "),a("li",[t._v("部署成本高")])]),t._v(" "),a("p",[t._v("分布式架构的要考虑的问题：")]),t._v(" "),a("ul",[a("li",[t._v("服务拆分粒度如何？")]),t._v(" "),a("li",[t._v("服务集群地址如何维护？")]),t._v(" "),a("li",[t._v("服务之间如何实现远程调用？")]),t._v(" "),a("li",[t._v("服务健康状态如何感知？")])]),t._v(" "),a("h3",{attrs:{id:"微服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务"}},[t._v("#")]),t._v(" 微服务")]),t._v(" "),a("p",[t._v("微服务是一种经过良好架构设计的 "),a("strong",[t._v("分布式")]),t._v(" 架构方案，微服务架构特征：")]),t._v(" "),a("ul",[a("li",[t._v("单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发。")]),t._v(" "),a("li",[t._v("面向服务：微服务对外暴露业务接口。")]),t._v(" "),a("li",[t._v("自治：团队独立、技术独立、数据独立（每个服务可以有自己的数据库）、部署独立。")]),t._v(" "),a("li",[t._v("隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题。")])]),t._v(" "),a("p",[t._v("优点：拆分粒度更小、服务更独立、耦合度更低。"),a("br"),t._v("\n缺点：架构非常复杂，运维、监控、部署难度提高。")]),t._v(" "),a("h4",{attrs:{id:"微服务的架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务的架构"}},[t._v("#")]),t._v(" 微服务的架构")]),t._v(" "),a("p",[t._v("微服务的架构一般来说包括以下几个方面：")]),t._v(" "),a("ul",[a("li",[t._v("注册中心")]),t._v(" "),a("li",[t._v("配置中心")]),t._v(" "),a("li",[t._v("服务集群")]),t._v(" "),a("li",[t._v("服务网关")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(365),width:"100%"}})]),t._v(" "),a("h4",{attrs:{id:"几种常见微服务技术对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#几种常见微服务技术对比"}},[t._v("#")]),t._v(" 几种常见微服务技术对比")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(366),width:"100%"}})]),t._v(" "),a("h2",{attrs:{id:"服务拆分及远程调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务拆分及远程调用"}},[t._v("#")]),t._v(" 服务拆分及远程调用")]),t._v(" "),a("h3",{attrs:{id:"服务拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务拆分"}},[t._v("#")]),t._v(" 服务拆分")]),t._v(" "),a("p",[t._v("服务拆分注意事项：")]),t._v(" "),a("ol",[a("li",[t._v("不同微服务，要做到单一职责，不要重复开发相同业务")]),t._v(" "),a("li",[t._v("微服务数据独立，不要访问其他微服务的数据库")]),t._v(" "),a("li",[t._v("微服务可以将自己的业务暴露为接口，供其他微服务使用")])]),t._v(" "),a("h3",{attrs:{id:"远程调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程调用"}},[t._v("#")]),t._v(" 远程调用")]),t._v(" "),a("p",[t._v("远程调用的其中一种方式是基于 "),a("code",[t._v("RestTemplate")]),t._v(" 发起 HTTP 请求。HTTP 请求做远程调用是与语言无关的调用，只要知道对方的 ip、端口、接口路径、请求参数即可。")]),t._v(" "),a("p",[t._v("基于 "),a("code",[t._v("RestTemplate")]),t._v(" 远程调用的步骤：")]),t._v(" "),a("ol",[a("li",[t._v("注册 "),a("code",[t._v("RestTemplate")]),t._v("，将其注册为 bean")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@MapperScan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cn.itcast.order.mapper"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderApplication")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("restTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("服务远程调用 "),a("code",[t._v("RestTemplate")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" restTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("queryOrderById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.查询订单        ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" orderMapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO 2.查询用户         ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8081/user/"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("  order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为是 get 查询，所以是 getForObject")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虽然通过 HTTP 请求返回的是 JSON 数据，但是该方法可以指定返回类型，从而自动将 JSON 转换为目标类型")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" restTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getForObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.封装user信息        ")]),t._v("\n        order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.返回        ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"eureka-注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka-注册中心"}},[t._v("#")]),t._v(" Eureka 注册中心")]),t._v(" "),a("h3",{attrs:{id:"远程调用的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程调用的问题"}},[t._v("#")]),t._v(" 远程调用的问题")]),t._v(" "),a("ul",[a("li",[t._v("服务消费者应该如何获取服务提供者的地址信息？")]),t._v(" "),a("li",[t._v("如果有多个服务提供者，消费者应该如何选择？")]),t._v(" "),a("li",[t._v("消费者如何得知服务提供者的健康状态？")])]),t._v(" "),a("h3",{attrs:{id:"eureka-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka-原理"}},[t._v("#")]),t._v(" Eureka 原理")]),t._v(" "),a("p",[t._v("消费者该如何获取服务提供者具体信息？")]),t._v(" "),a("ul",[a("li",[t._v("服务提供者启动时向 Eureka 注册自己的信息")]),t._v(" "),a("li",[t._v("Eureka 保存这些信息")]),t._v(" "),a("li",[t._v("消费者根据服务名称向 Eureka 拉取提供者信息")])]),t._v(" "),a("p",[t._v("如果有多个服务提供者，消费者应该如何选择？"),a("br"),t._v("\n服务消费者可以利用负载均衡算法，从服务列表中挑选一个")]),t._v(" "),a("p",[t._v("消费者如何感知服务提供者健康状态？")]),t._v(" "),a("ul",[a("li",[t._v("服务提供者会每隔30秒向 EurekaServer 发送心跳请求，报告健康状态")]),t._v(" "),a("li",[t._v("Eureka 会更新记录服务列表信息，心跳不正常会被剔除")]),t._v(" "),a("li",[t._v("消费者因此可以拉取到最新的信息")])]),t._v(" "),a("h3",{attrs:{id:"搭建-eurekaserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建-eurekaserver"}},[t._v("#")]),t._v(" 搭建 EurekaServer")]),t._v(" "),a("p",[t._v("搭建 EurekaServer 的服务步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("创建项目，引入 "),a("code",[t._v("spring-cloud-starter-netflix-eureka-server")]),t._v(" 依赖。因为 EurekaServer 本身也是一个微服务项目，这也意味着它启动时需要将自己也注册上去。")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-netflix-eureka-server"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("编写启动类，添加 "),a("code",[t._v("@EnableEurekaServer")]),t._v(" 注解")]),t._v(" "),a("li",[t._v("添加 application.yml 文件，编写配置")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10086")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eurekaServer  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# eureka 的服务名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# eureka 的地址信息")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10086/eureka/\n")])])]),a("h3",{attrs:{id:"服务注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务注册"}},[t._v("#")]),t._v(" 服务注册")]),t._v(" "),a("p",[t._v("一个微服务向 Eureka 注册的步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("引入 "),a("code",[t._v("spring-cloud-starter-netflix-eureka-client")]),t._v(" 依赖，注意，依赖末尾是 "),a("code",[t._v("client")])])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-netflix-eureka-client"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("在 application.yml 文件中编写配置信息")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   \n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" userservice      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# eureka 的地址信息")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10086/eureka/\n")])])]),a("h3",{attrs:{id:"服务发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务发现"}},[t._v("#")]),t._v(" 服务发现")]),t._v(" "),a("p",[t._v("基于 Eureka 做服务的拉取是基于服务名称获取服务列表，再对服务列表做负载均衡。")]),t._v(" "),a("p",[t._v("基于 Eureka 做服务拉取的步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("修改访问的 url 路径，用服务名代替 ip、端口")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原先的 url 路径")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://127.0.0.1:8080/user/"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修改后的 url 路径")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://userservice/user/"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("在要做服务拉取的微服务中 "),a("code",[t._v("RestTemplate")]),t._v(" 上添加 "),a("code",[t._v("@LoadBalanced")]),t._v(" 注解;")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@LoadBalanced")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("restTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"ribbon-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon-负载均衡"}},[t._v("#")]),t._v(" Ribbon 负载均衡")]),t._v(" "),a("h3",{attrs:{id:"负载均衡原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡原理"}},[t._v("#")]),t._v(" 负载均衡原理")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(367),width:"100%"}})]),t._v(" "),a("h3",{attrs:{id:"负载均衡策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡策略"}},[t._v("#")]),t._v(" 负载均衡策略")]),t._v(" "),a("p",[t._v("Ribbon 的负载均衡规则是一个叫做 "),a("code",[t._v("IRule")]),t._v(" 的接口来定义的，每一个子接口都是一种规则："),a("br")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(368),width:"100%"}})]),a("p"),t._v(" "),a("p",[t._v("这些规则实现类的规则描述如下："),a("br")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(369),width:"100%"}})]),a("p"),t._v(" "),a("p",[t._v("通过定义 "),a("code",[t._v("IRule")]),t._v(" 的实现可以修改负载均衡策略，有两种方式：")]),t._v(" "),a("ol",[a("li",[t._v("代码方式：在 Application 启动类中，定义一个新的 "),a("code",[t._v("IRule")]),t._v(" 并注册为 bean：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IRule")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RandomRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("配置文件方式：在 application.yml 文件中，添加新的配置去修改：")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("userservice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要实现负载均衡的某个服务的名称")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ribbon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("NFLoadBalancerRuleClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" com.netflix.loadbalancer.RandomRule "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 负载均衡规则")]),t._v("\n")])])]),a("h3",{attrs:{id:"懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[t._v("#")]),t._v(" 懒加载")]),t._v(" "),a("p",[t._v("Ribbon 默认是采用懒加载，即第一次访问时才回去创建 "),a("code",[t._v("LoadBalanceClient")]),t._v("，请求时间会比较长。"),a("br"),t._v("\n而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ribbon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eager-load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启饥饿加载 ")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clients")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" userservice "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定对 userservice 这个服务饥饿加载")]),t._v("\n")])])]),a("h2",{attrs:{id:"nacos-注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos-注册中心"}},[t._v("#")]),t._v(" Nacos 注册中心")]),t._v(" "),a("h3",{attrs:{id:"认识-nacos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识-nacos"}},[t._v("#")]),t._v(" 认识 Nacos")]),t._v(" "),a("p",[t._v("Nacos 是阿里巴巴的产品，现在是 SpringCloud 的一个组件，相比于 Eureka 功能更加丰富，在国内受欢迎程度较高。")]),t._v(" "),a("p",[t._v("Nacos 要使用前需要安装。"),a("br"),t._v("\n安装完后需要进行端口的配置，Nacos 默认端口是 8848，若该端口已被占用，则可以修改配置文件 application.properties 中的端口。"),a("br"),t._v("\nNacos 的启动命令是：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("startup.cmd "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" standalone   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个命令是单机启动的")]),t._v("\n")])])]),a("h3",{attrs:{id:"服务注册到-nacos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务注册到-nacos"}},[t._v("#")]),t._v(" 服务注册到 Nacos")]),t._v(" "),a("ol",[a("li",[t._v("在父工程中添加 "),a("code",[t._v("spring-cloud-alibaba")]),t._v(" 的管理依赖，以管理版本。")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.alibaba.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-alibaba-dependencies"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2.2.6.RELEASE"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("pom"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("import"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("注释掉原有的 Eureka 依赖，因为它们可能会冲突。")]),t._v(" "),a("li",[t._v("添加 Nacos 的客户端依赖：")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.alibaba.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-alibaba-nacos-discovery"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("修改 application.yml 文件，注释 Eureka 地址，添加 Nacos 地址：")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Nacao 服务端地址")]),t._v("\n")])])]),a("h3",{attrs:{id:"nacos-服务分级存储模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos-服务分级存储模型"}},[t._v("#")]),t._v(" Nacos 服务分级存储模型")]),t._v(" "),a("p",[t._v("Nacos 服务分级存储模型有三层：")]),t._v(" "),a("ol",[a("li",[t._v("一级是服务，例如 "),a("code",[t._v("userservice")])]),t._v(" "),a("li",[t._v("二级是集群，例如广州集群和深圳集群")]),t._v(" "),a("li",[t._v("三级是实例，例如广州机房中的某台部署了 userservice 的服务器。")])]),t._v(" "),a("p",[t._v("服务调用应尽可能选择本地集群的服务，跨集群调用延迟较高。本地集群不可访问时，再去访问其他集群。")]),t._v(" "),a("p",[t._v("Nacos 修改服务所在集群的方式是修改 application.yml 文件，添加如下信息：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nacos 服务端地址")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("discovery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cluster-name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" GZ "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置集群名称，也就是机房位置，例如：GZ，广州")]),t._v("\n")])])]),a("h3",{attrs:{id:"根据集群负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根据集群负载均衡"}},[t._v("#")]),t._v(" 根据集群负载均衡")]),t._v(" "),a("p",[t._v("在修改服务所在的集群后，需要配置负载均衡规则，才能做到优先寻找与自己同集群的服务，这个规则是 "),a("code",[t._v("NacosRule")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("userservice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ribbon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("NFLoadBalancerRuleClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" com.alibaba.cloud.nacos.ribbon.NacosRule\n")])])]),a("p",[a("code",[t._v("NacosRule")]),t._v(" 负载均衡策略的选择过程如下：")]),t._v(" "),a("ol",[a("li",[t._v("优先选择同集群服务实例列表")]),t._v(" "),a("li",[t._v("本地集群找不到提供者，才去其他集群寻找，并且会报警告")]),t._v(" "),a("li",[t._v("确定了可用实例列表之后，再采用随机负载均衡策略挑选实例。")])]),t._v(" "),a("p",[t._v("此外，Nacos 还提供了权重配置来控制实例的访问频率，权重越大则访问频率越高，若权重为 0 则完全不会被访问。具体的配置步骤是在 Nacos 控制台选择实例进行权重编辑。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(370),width:"100%"}})]),t._v(" "),a("h3",{attrs:{id:"环境隔离-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境隔离-namespace"}},[t._v("#")]),t._v(" 环境隔离 - namespace")]),t._v(" "),a("p",[t._v("Nacos 中服务存储和数据存储的最外层都是一个名为 namespace 的东西，用以隔离不同环境。每个 namespace 都有唯一 id，不同 namespace 下的服务互相不可见。")]),t._v(" "),a("p",[t._v("步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("在 Nacos 控制台创建 namespace，创建后该 namespace 会有一个唯一 id。")]),t._v(" "),a("li",[t._v("修改具体服务中的 application.yml，给服务添加 namespace：")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("discovery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cluster-name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" GZ\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 492a7d5d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("237b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("46a1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("a99a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("fa8e98e4b0f9 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命名空间，填ID")]),t._v("\n")])])]),a("h3",{attrs:{id:"nacos-注册中心原理细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos-注册中心原理细节"}},[t._v("#")]),t._v(" Nacos 注册中心原理细节")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(371),width:"100%"}})]),t._v(" "),a("h3",{attrs:{id:"临时实例和非临时实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临时实例和非临时实例"}},[t._v("#")]),t._v(" 临时实例和非临时实例")]),t._v(" "),a("p",[t._v("服务注册到 Nacos 时，可以选择注册为临时或非临时实例，通过下面的配置来设置：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("discovery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ephemeral")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置为非临时实例")]),t._v("\n")])])]),a("p",[t._v("临时实例宕机时，会从 Nacos 的服务列表中剔除，而非临时实例则不会。")]),t._v(" "),a("h3",{attrs:{id:"nacos-与-eureka-对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos-与-eureka-对比"}},[t._v("#")]),t._v(" Nacos 与 Eureka 对比")]),t._v(" "),a("p",[t._v("Nacos 与 Eureka 共同点：")]),t._v(" "),a("ol",[a("li",[t._v("都支持服务注册和服务发现")]),t._v(" "),a("li",[t._v("都支持服务提供者心跳方式做健康检测")])]),t._v(" "),a("p",[t._v("Nacos 与 Eureka 区别：")]),t._v(" "),a("ol",[a("li",[t._v("Nacos 支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式。")]),t._v(" "),a("li",[t._v("临时实例心跳不正常会被剔除，非临时实例则不会被剔除。")]),t._v(" "),a("li",[t._v("Nacos 支持服务列表变更的消息推送模式，服务列表更新更及时。")]),t._v(" "),a("li",[t._v("Nacos 集群默认采用 AP 方式，当集群中存在非临时实例时，采用 CP 方式；Eureka 采用 AP 方式。")])]),t._v(" "),a("h2",{attrs:{id:"nacos-配置管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos-配置管理"}},[t._v("#")]),t._v(" Nacos 配置管理")]),t._v(" "),a("h3",{attrs:{id:"统一配置管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统一配置管理"}},[t._v("#")]),t._v(" 统一配置管理")]),t._v(" "),a("p",[t._v("Nacos 提供了统一的配置管理功能，允许开发人员集中式地管理微服务架构中的配置信息，并在需要时动态刷新，无需重启微服务。")]),t._v(" "),a("p",[t._v("Nacos 统一配置管理的步骤如下：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在 Nacos 控制台添加配置信息：\n")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(372),width:"100%"}})]),a("p")]),t._v(" "),a("li",[a("p",[t._v("在微服务中引入 Nacos 的配置管理客户端依赖：")])])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--nacos配置管理依赖--\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.alibaba.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-alibaba-nacos-config"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("在 resource 目录中添加一个 bootstrap.yml 文件，这个文件是引导文件，优先级高于 application.yml：")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" userservice "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("active")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dev "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开发环境，这里是 dev ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Nacos地址")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("file-extension")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" yaml "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文件后缀名")]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("将 application.yml 中原来关于这部分的配置注释掉")])]),t._v(" "),a("h4",{attrs:{id:"为什么要新建一个-bootstrap-yml-文件去配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要新建一个-bootstrap-yml-文件去配置"}},[t._v("#")]),t._v(" 为什么要新建一个 bootstrap.yml 文件去配置？")]),t._v(" "),a("p",[t._v("因为统一配置管理后，项目启动之后要先读取 Nacos 中配置文件的信息，再读取本地 application.yml 文件中的配置信息。而原来中对于 Nacos 的配置信息是在 application.yml 中，这样的话就无法在读取 Nacos 配置文件信息的时候找到 Nacos，因此要把 Nacos 配置信息放在更前的步骤中。bootstrap.yml 是引导文件，优先级更高，该文件的配置信息加载会优先于 Nacos 中统一配置文件信息的拉取。")]),t._v(" "),a("h3",{attrs:{id:"配置热更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置热更新"}},[t._v("#")]),t._v(" 配置热更新")]),t._v(" "),a("p",[t._v("Nacos 中的配置文件变更后，微服务无需重启就可以感知。不过需要通过下面两种配置实现：")]),t._v(" "),a("ol",[a("li",[t._v("在 "),a("code",[t._v("@Value")]),t._v(" 注入的变量所在类上添加注解 "),a("code",[t._v("@RefreshScope")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Slf4j")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestController")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/user"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RefreshScope")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserController")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${pattern.dateformat}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" dateformat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("使用 "),a("code",[t._v("@ConfigurationProperties")]),t._v(" 注解读取配置")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Data")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ConfigurationProperties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pattern"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PatternProperties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" dateformat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("注意：不是所有的配置都适合放到配置中心，维护起来比较麻烦，建议将一些关键参数，需要运行时调整的参数放到 nacos 配置中心")])]),t._v(" "),a("h3",{attrs:{id:"配置共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置共享"}},[t._v("#")]),t._v(" 配置共享")]),t._v(" "),a("p",[t._v("微服务启动时会从 nacos 读取多个配置文件：")]),t._v(" "),a("ol",[a("li",[t._v("[spring.application.name]-[spring.profile.active].yaml，例如 userservice-dev.yaml")]),t._v(" "),a("li",[t._v("[spring.application.name].yaml，例如 userservice.yaml")])]),t._v(" "),a("p",[t._v("无论 profile 如何变化，[spring.application.name].yaml 这个文件一定会加载，因此多环境共享配置可以写入这个文件。")]),t._v(" "),a("p",[t._v("此外，不同微服务之间可以共享配置文件，通过下面的两种方式来指定：")]),t._v(" "),a("ol",[a("li",[t._v("方式一：")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("shared-configs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 多微服务间共享的配置列表")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("-dataId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" common.yaml  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要共享的配置文件")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("方式二：")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("extends-configs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 多微服务间共享的配置列表")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("-dataId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" common.yaml  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要共享的配置文件")]),t._v("\n")])])]),a("p",[t._v("注意：这两种方式不支持热更新。")]),t._v(" "),a("p",[t._v("若多个配置中有同一个配置，那么多种配置的优先级如下：")]),t._v(" "),a("ul",[a("li",[t._v("服务名称-profile.yaml > 服务名称.yaml > extension-config > shared-config > 本地配置")])]),t._v(" "),a("h3",{attrs:{id:"搭建-nacos-集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建-nacos-集群"}},[t._v("#")]),t._v(" 搭建 Nacos 集群")]),t._v(" "),a("p",[t._v("Nacos 生产环境下一定要部署为集群状态，具体步骤可以搜，这里简要介绍一下步骤：")]),t._v(" "),a("ol",[a("li",[t._v("搭建 MySQL 集群并初始化数据库表，因为在集群模式下 Nacos 的配置信息等存放在数据库中")]),t._v(" "),a("li",[t._v("下载解压 Nacos")]),t._v(" "),a("li",[t._v("修改集群配置（节点信息）、数据库配置")]),t._v(" "),a("li",[t._v("分别启动多个 Nacos 节点")]),t._v(" "),a("li",[t._v("nginx 负载均衡和反向代理")])]),t._v(" "),a("h2",{attrs:{id:"http-客户端-feign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-客户端-feign"}},[t._v("#")]),t._v(" http 客户端 Feign")]),t._v(" "),a("h3",{attrs:{id:"feign-替代-resttemplate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feign-替代-resttemplate"}},[t._v("#")]),t._v(" Feign 替代 "),a("code",[t._v("RestTemplate")])]),t._v(" "),a("p",[t._v("为什么要用 Feign 替代 "),a("code",[t._v("RestTemplate")]),t._v("？")]),t._v(" "),a("ol",[a("li",[t._v("代码可读性较差，编程体验不统一")]),t._v(" "),a("li",[t._v("参数复杂的情况下 URL 难以维护")])]),t._v(" "),a("p",[t._v("如下为 "),a("code",[t._v("RestTemplate")]),t._v(" 发起远程调用的代码：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://userservice/user/"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" restTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getForObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Feign 是一个 "),a("strong",[t._v("声明式")]),t._v(" 的 HTTP 客户端，其作用就是帮助我们优雅地实现 HTTP 请求的发送，解决上面提到的问题。")]),t._v(" "),a("p",[t._v("使用 Feign 的步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("引入依赖：")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-openfeign"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("在服务的启动类添加 "),a("code",[t._v("@EnableFeignClients")]),t._v(" 注解开启 Feign 的功能：")]),t._v(" "),a("li",[t._v("编写 Feign 客户端：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FeignClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"userservice"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/user/{id}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PathVariable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("它主要是基于 SpringMVC 的注解来声明远程调用的信息，比如：")]),t._v(" "),a("ul",[a("li",[t._v("服务名称："),a("code",[t._v("userservice")])]),t._v(" "),a("li",[t._v("请求方式："),a("code",[t._v("GET")])]),t._v(" "),a("li",[t._v("请求路径："),a("code",[t._v("/user/{id}")])]),t._v(" "),a("li",[t._v("请求参数："),a("code",[t._v("Long id")])]),t._v(" "),a("li",[t._v("返回值类型："),a("code",[t._v("User")])])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("使用 Feign 客户端中定义的方法代替 RestTemplate")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserClient")]),t._v(" userClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("queryOrderById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" orderMapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用 Feign 发起 HTTP 请求，查询用户")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"自定义配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义配置"}},[t._v("#")]),t._v(" 自定义配置")]),t._v(" "),a("p",[t._v("Feign 运行自定义配置来覆盖默认配置，可以修改的配置如下：\n")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(373),width:"100%"}})]),a("p"),t._v(" "),a("p",[t._v("一般我们需要配置的就是日志级别。")]),t._v(" "),a("p",[t._v("关于自定义 Feign 的配置，有两种方式：")]),t._v(" "),a("ol",[a("li",[t._v("通过配置文件的方式：")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("feign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里用 default 就是全局配置，如果是写服务名称如 userservice，则是针对某个微服务的配置")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("loggerLevel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" FULL "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 日志级别 ")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("通过 Java 代码的方式，不过需要先声明一个 Bean：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FeignClientConfiguration")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Level")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("feignLogLevel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Level")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BASIC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("而后如果是全局配置，则把它放到 "),a("code",[t._v("@EnableFeignClients")]),t._v(" 这个注解中：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableFeignClients")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("defaultConfiguration "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FeignClientConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),a("ul",[a("li",[t._v("如果是局部配置，则把它放到 "),a("code",[t._v("@FeignClient")]),t._v(" 这个注解中：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FeignClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"userservice"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" configuration "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FeignClientConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),a("h3",{attrs:{id:"feign-性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feign-性能优化"}},[t._v("#")]),t._v(" Feign 性能优化")]),t._v(" "),a("p",[t._v("Feign 底层的客户端实现：")]),t._v(" "),a("ul",[a("li",[t._v("URLConnection：默认实现，不支持连接池")]),t._v(" "),a("li",[t._v("Apache HttpClient：支持连接池")]),t._v(" "),a("li",[t._v("OKHttp：支持连接池")])]),t._v(" "),a("p",[t._v("因此连接的重复创建会消耗大量资源，因此优化 Feign 的一个点就是使用连接池代替默认的 URLConnection。其次，FULL 和 HEADERS 的日志级别会打印大量日志，也会消耗资源，最好用 BASIC 或 NONE。")]),t._v(" "),a("p",[t._v("对于连接池优化，以用 HttpClient 代替为例，步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("引入依赖：")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--httpClient的依赖 --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("io.github.openfeign"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("feign-httpclient"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("配置连接池：")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("feign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default全局的配置")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("LoggerLevel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BASIC            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 日志级别，BASIC就是基本的请求和响应信息 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("httpclient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启feign对HttpClient的支持")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("max-connections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最大的连接数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("max-connections-per-route")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每个路径的最大连接数")]),t._v("\n")])])]),a("h3",{attrs:{id:"feign-的最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feign-的最佳实践"}},[t._v("#")]),t._v(" Feign 的最佳实践")]),t._v(" "),a("p",[t._v("之前使用 Feign 的缺点：")]),t._v(" "),a("ol",[a("li",[t._v("Feign 是在消费者端的，那么对于每一个消费者实例都要去做一个配置使用，这样相当于做了重复的开发，不好。")]),t._v(" "),a("li",[t._v("其次，FeignClient 定义的方法要跟服务提供者提供的方法保持一致（方法名除外），不然调用不成功，也就是说，这两者是有很强的关系的，有点紧耦合的意思。")])]),t._v(" "),a("p",[t._v("最佳实践的方式有两种：继承和抽取。"),a("br"),t._v("\n方式一：继承。给消费者的 FeignClient 和服务提供者的 Controller 定义统一的父接口作为标准，如下所示：\n")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(374),width:"100%"}})]),a("p"),t._v(" "),a("p",[t._v("这种方式也有缺点：一是服务紧耦合，二是父接口参数列表中的映射不会被继承。")]),t._v(" "),a("p",[t._v("方式二：抽取。将 FeignClient 抽取为独立模块，并且把接口有关的 POJO、默认的 Feign 配置都放到这个模块中，提供给所有消费者使用。"),a("br")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(375),width:"100%"}})]),a("p"),t._v(" "),a("p",[t._v("对于这种方式，其实现步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("首先创建一个模块并命名，比如命名为 feign-api，然后引入 feign 的 starter 依赖。")]),t._v(" "),a("li",[t._v("将微服务中编写的 Client、POJO 类、feign 的配置类等都复制到 feign-api 模块中。")]),t._v(" "),a("li",[t._v("在微服务中引入 feign-api 的依赖。")]),t._v(" "),a("li",[t._v("修改微服务中与迁移到 feign-api 中的类有关的 import 部分，改为导入 feign-api 中的包。")]),t._v(" "),a("li",[t._v("重启服务。")])]),t._v(" "),a("p",[t._v("由于对于 "),a("code",[t._v("FeignClient")]),t._v(" 进行了迁移，因此定义的 "),a("code",[t._v("FeignClient")]),t._v(" 不在 SpringBootApplication 的扫描包范围，无法创建为 bean 并注入，导致 "),a("code",[t._v("FeignClient")]),t._v(" 无法使用。这种情况有两种方式可以解决：")]),t._v(" "),a("ol",[a("li",[t._v("方式一：在 "),a("code",[t._v("@EnableFeignClients")]),t._v(" 注解中添加 basePackages：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableFeignClients")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("basePackages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.helloworldyc.feign.clients"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",[a("li",[t._v("方式二：在 "),a("code",[t._v("@EnableFeignClients")]),t._v(" 注解中添加 "),a("code",[t._v("clients")]),t._v("，指定具体 "),a("code",[t._v("FeignClient")]),t._v(" 的字节码（推荐）")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableFeignClients")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clients "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"统一网关-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统一网关-gateway"}},[t._v("#")]),t._v(" 统一网关 Gateway")]),t._v(" "),a("h3",{attrs:{id:"为什么需要网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要网关"}},[t._v("#")]),t._v(" 为什么需要网关")]),t._v(" "),a("p",[t._v("并不是所有的微服务都可以由外部访问的，网关可以管理对微服务的访问权限。总的来说，就是为了更好地管理和控制微服务之间的通信。")]),t._v(" "),a("p",[t._v("网关有如下功能：")]),t._v(" "),a("ol",[a("li",[t._v("路由和负载均衡：微服务架构中有多个服务，它们可能分布在不同的主机和端口上。微服务网关可以用于路由请求到相应的服务实例，并在多个实例之间进行负载均衡，确保每个服务实例都能够处理适当的请求负载。")]),t._v(" "),a("li",[t._v("协议转换：微服务可能使用不同的通信协议或数据格式。微服务网关可以充当协议转换器，将请求从一个协议或数据格式转换为另一个，从而使不同的服务能够相互通信。")]),t._v(" "),a("li",[t._v("安全性和认证：微服务网关可以处理认证和授权，集中管理对微服务的访问权限。通过在网关层实施安全性，可以减轻每个微服务都必须处理这些方面的负担。")]),t._v(" "),a("li",[t._v("监控和日志：微服务网关可以集中处理日志和监控功能，记录请求和响应的信息，以便进行故障排除、性能分析和系统优化。这有助于简化微服务的监控和管理。")]),t._v(" "),a("li",[t._v("对用户请求做限流")]),t._v(" "),a("li",[t._v("缓存和性能优化：微服务网关可以实现请求和响应的缓存，以减轻后端微服务的负担，提高性能和响应速度。")]),t._v(" "),a("li",[t._v("降低复杂性：微服务网关可以为客户端提供一个简化的接口，隐藏底层微服务的复杂性。这有助于客户端与微服务之间的解耦，并使系统更易于理解和维护。")])]),t._v(" "),a("p",[t._v("在 SpringCloud 中网关的实现包括两种：gateway 和 zuul。Zuul 是基于 Servlet 的实现，属于阻塞式编程。而 SpringCloudGateway 则是基于 Spring5 中提供的 WebFlux，属于响应式编程的实现，具备更好的性能。")]),t._v(" "),a("h3",{attrs:{id:"gateway-快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway-快速入门"}},[t._v("#")]),t._v(" gateway 快速入门")]),t._v(" "),a("p",[t._v("网关本质上也是一个微服务，因此需要搭建网关服务，其步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("创建新的 module，引入 SpringCloudGateway 的依赖和 Nacos 的服务发现依赖：")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--网关依赖--\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-gateway"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--nacos服务发现依赖--\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.alibaba.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-alibaba-nacos-discovery"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("配置 application.yml，编写路由配置及 Nacos 地址")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10010")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网关端口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gateway                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nacos 地址")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网关路由配置")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由 id,自定义，只要唯一即可")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uri: http://127.0.0.1:8081# 路由的目标地址，写具体 ip 就是固定地址")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//userservice       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由的目标地址，lb 就是负载均衡，后面跟服务名称，动态查询服务地址")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由断言，也就是判断请求是否符合路由规则的条件")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/user/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个是按照路径匹配，只要以/user/开头就符合要求")]),t._v("\n")])])]),a("p",[t._v("网关路由可以配置的内容包括：")]),t._v(" "),a("ul",[a("li",[t._v("路由 id：路由的唯一标识，自定义，只要唯一即可。")]),t._v(" "),a("li",[t._v("uri：路由目的地，支持 lb 和 http 两种。写 http 即具体 ip 就是固定地址；写 lb 就是负载均衡，后面跟服务名称，动态查询服务地址。")]),t._v(" "),a("li",[t._v("predicates：路由断言，判断请求是否符合要求，符合则转发到路由目的地。")]),t._v(" "),a("li",[t._v("filters：路由过滤器，处理请求或响应。")])]),t._v(" "),a("p",[t._v("总的服务过程如下：\n")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(376),width:"100%"}})]),a("p"),t._v(" "),a("h3",{attrs:{id:"路由断言工厂-route-predicate-factory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由断言工厂-route-predicate-factory"}},[t._v("#")]),t._v(" 路由断言工厂 Route Predicate Factory")]),t._v(" "),a("p",[t._v("我们在配置文件中写的断言规则只是字符串，这些字符串需要被 Predicate Factory 读取并处理，转变为路由判断的条件。"),a("br"),t._v("\n例如，"),a("code",[t._v("Path=/user/**")]),t._v(" 是按照路径匹配的，这个规则是由 "),a("code",[t._v("org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory")]),t._v(" 类来处理的。"),a("br"),t._v("\n像这样的断言工厂在 SpringCloudGateway 还有十几个，也就是说还有十几种断言规则，如下："),a("br")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(377),width:"100%"}})]),a("p"),t._v(" "),a("h3",{attrs:{id:"过滤器工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器工厂"}},[t._v("#")]),t._v(" 过滤器工厂")]),t._v(" "),a("p",[t._v("网关还可以用来做过滤，GatewayFilter 是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理："),a("br")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:s(378),width:"100%"}})]),a("p"),t._v(" "),a("p",[t._v("Spring 提供了 31 种不同的路由过滤器工厂，例如：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("AddRequestHeader")]),t._v("：给当前请求添加一个请求头")]),t._v(" "),a("li",[a("code",[t._v("RemoveRequestHeader")]),t._v("：移除请求中的一个请求头")]),t._v(" "),a("li",[a("code",[t._v("AddResponseHeader")]),t._v("：给响应结果中添加一个响应头")]),t._v(" "),a("li",[a("code",[t._v("RemoveResponseHeader")]),t._v("：从响应结果中移除一个响应头")]),t._v(" "),a("li",[a("code",[t._v("RequestRateLimiter")]),t._v("：限制请求的流量")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[t._v("实现步骤为：在 gateway 中修改路由配置，给单个微服务的路由添加过滤器；如果要对所有路由都生效，则可以将过滤器工厂写到 default 下。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10010")]),t._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网关端口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gateway                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nacos 地址")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网关路由配置")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由 id,自定义，只要唯一即可")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uri: http://127.0.0.1:8081  # 路由的目标地址，写具体 ip 就是固定地址")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//userservice         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由的目标地址，lb 就是负载均衡，后面跟服务名称，动态查询服务地址")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由断言，也就是判断请求是否符合路由规则的条件")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/user/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个是按照路径匹配，只要以 /user/ 开头就符合要求")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("filters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 过滤器")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" AddRequestHeader=Fault"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Itcast is freaking awesome"),a("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加请求头")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//orderservice\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=order/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default-filters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认过滤器，会对所有的路由请求都生效")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" AddRequestHeader=Truth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Itcast is freaking awesome"),a("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加请求头")]),t._v("\n")])])]),a("h3",{attrs:{id:"全局过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局过滤器"}},[t._v("#")]),t._v(" 全局过滤器")]),t._v(" "),a("p",[t._v("全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与 GatewayFilter 的作用一样。"),a("br"),t._v("\n区别在于 GatewayFilter 通过配置定义，处理逻辑是固定的。而 GlobalFilter 的逻辑需要自己写代码实现，可以自定义处理逻辑。"),a("br"),t._v("\n定义方式是：自定义类，实现 GlobalFilter 接口，添加 "),a("code",[t._v("@Order")]),t._v(" 注解或者实现 "),a("code",[t._v("Ordered")]),t._v(" 接口。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GlobalFilter 接口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     *  处理当前请求，有必要的话通过{@link GatewayFilterChain}将请求交给下一个过滤器处理\n     *\n     * @param exchange 请求上下文，里面可以获取Request、Response等信息\n     * @param chain 用来把请求委托给下一个过滤器 \n     * @return {@code Mono<Void>} 返回标示当前过滤器业务结束\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerWebExchange")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayFilterChain")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：\n * 参数中是否有authorization，\n * authorization参数值是否为admin\n * 如果同时满足则放行，否则拦截\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizeFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerWebExchange")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayFilterChain")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.获取请求参数")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MultiValueMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" params "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueryParams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.获取authorization参数")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" auth "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"authorization"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.校验")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"admin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前过滤器放行，到下一个过滤器或转给请求微服务")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.拦截       ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.1.禁止访问")]),t._v("\n        exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setStatusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FORBIDDEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.2.结束处理")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setComplete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"过滤器执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器执行顺序"}},[t._v("#")]),t._v(" 过滤器执行顺序")]),t._v(" "),a("p",[t._v("请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter。"),a("br"),t._v("\n请求路由后，会将当前路由过滤器和 DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器。")]),t._v(" "),a("p",[t._v("具体的排序规则是：")]),t._v(" "),a("ol",[a("li",[t._v("按照每个过滤器的 order 值来排序，order 值越小，优先级越高，执行顺序越靠前")]),t._v(" "),a("li",[t._v("当过滤器的 order 值一样时，会按照 DefaultFilter -> 当前路由过滤器 -> GlobalFilter 的顺序执行。")])]),t._v(" "),a("p",[t._v("而过滤器的 order 值是这么确定的：")]),t._v(" "),a("ul",[a("li",[t._v("每一个过滤器都必须指定一个 int 类型的 order 值。")]),t._v(" "),a("li",[t._v("GlobalFilter 通过实现 Ordered 接口，或者添加 "),a("code",[t._v("@Order")]),t._v(" 注解来指定 order 值，由我们自己指定")]),t._v(" "),a("li",[t._v("路由过滤器和 DefaultFilter 的 order 值由 Spring 指定，每种过滤器默认是按照声明顺序从 1 递增的，因此同一种过滤器不可能出现 order 值相等的情况。")])]),t._v(" "),a("h3",{attrs:{id:"跨域问题处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域问题处理"}},[t._v("#")]),t._v(" 跨域问题处理")]),t._v(" "),a("p",[t._v("跨域：域名不一致就是跨域，主要包括：")]),t._v(" "),a("ul",[a("li",[t._v("域名不同： www.taobao.com 和 www.taobao.org 和 www.jd.com 和 miaosha.jd.com")]),t._v(" "),a("li",[t._v("域名相同，端口不同：localhost:8080 和 localhost:8081")])]),t._v(" "),a("p",[t._v("跨域问题：浏览器禁止请求的发起者与服务端发生跨域 ajax 请求，请求被浏览器拦截的问题。"),a("br"),t._v("\n解决方案：CORS。也就是浏览器会去服务端询问是否允许跨域请求。")]),t._v(" "),a("p",[t._v("网关处理跨域采用的同样是 CROS 方案，并且只需要简单配置即可实现：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 。。。")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("globalcors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局的跨域处理")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("add-to-simple-url-handler-mapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解决 options 请求被拦截问题")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("corsConfigurations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'[/**]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("            \n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allowedOrigins")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许哪些网站的跨域请求 ")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8090"')]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.leyou.com"')]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allowedMethods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许的跨域 ajax 的请求方式")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET"')]),t._v("            \n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST"')]),t._v("           \n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DELETE"')]),t._v("      \n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PUT"')]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OPTIONS"')]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allowedHeaders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许在请求中携带的头信息")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allowCredentials")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否允许携带 cookie")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("360000")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这次跨域检测的有效期")]),t._v("\n")])])]),a("h3",{attrs:{id:"限流过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限流过滤器"}},[t._v("#")]),t._v(" 限流过滤器")]),t._v(" "),a("p",[t._v("限流：对应用服务器的请求做限制，保护服务器，避免因过多请求而导致服务器过载甚至宕机。限流算法常见的包括三种：")]),t._v(" "),a("ul",[a("li",[t._v("计数器算法，又包括窗口计数器算法、滑动窗口计数器算法")]),t._v(" "),a("li",[t._v("漏桶算法(Leaky Bucket)")]),t._v(" "),a("li",[t._v("令牌桶算法（Token Bucket）")])]),t._v(" "),a("h4",{attrs:{id:"限流过滤器-计数器算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限流过滤器-计数器算法"}},[t._v("#")]),t._v(" 限流过滤器——计数器算法")]),t._v(" "),a("p",[t._v("固定窗口计数器算法概念如下：")]),t._v(" "),a("ul",[a("li",[t._v("将时间划分为多个窗口")]),t._v(" "),a("li",[t._v("在每个窗口内每有一次请求就将计数器加一，当时间到达下一个窗口时，计数器重置")]),t._v(" "),a("li",[t._v("如果计数器超过了限制数量，则本窗口内所有请求都将被丢弃。")])]),t._v(" "),a("h4",{attrs:{id:"限流过滤器-漏桶算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限流过滤器-漏桶算法"}},[t._v("#")]),t._v(" 限流过滤器——漏桶算法")]),t._v(" "),a("p",[t._v("漏桶算法说明：")]),t._v(" "),a("ul",[a("li",[t._v('将每个请求视作"水滴"放入"漏桶"进行存储；')]),t._v(" "),a("li",[t._v('"漏桶"以固定速率向外"漏"出请求来执行，如果"漏桶"空了则停止"漏水”；如果"漏桶"满了则多余的"水滴"会被直接丢弃。')])]),t._v(" "),a("h3",{attrs:{id:"限流过滤器-令牌桶算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限流过滤器-令牌桶算法"}},[t._v("#")]),t._v(" 限流过滤器——令牌桶算法")]),t._v(" "),a("p",[t._v("令牌桶算法说明：")]),t._v(" "),a("ul",[a("li",[t._v("以固定的速率生成令牌，存入令牌桶中，如果令牌桶满了以后，多余令牌丢弃。")]),t._v(" "),a("li",[t._v("请求进入后，必须先尝试从桶中获取令牌，获取到令牌后才可以被处理，如果令牌桶中没有令牌，则请求等待或丢弃。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);