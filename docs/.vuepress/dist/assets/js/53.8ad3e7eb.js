(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{480:function(v,_,e){"use strict";e.r(_);var a=e(8),t=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("blockquote",[_("p",[v._v("这篇文章以问答的形式用于快速回顾知识点以及用于自测。"),_("br"),v._v("\n因为知识点相当多，即使在看时能够理解记住，但过后也往往只是有印象，大概知道是什么东西，但想回答出来却总是卡壳，看了忘，忘了看。因此，这篇文章用于帮助速记回忆，自测时可以由这些点延伸。\n注：参考的主要是 Guide 哥的网站内容以及 chatGPT。")])]),v._v(" "),_("h2",{attrs:{id:"线程与进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程"}},[v._v("#")]),v._v(" 线程与进程")]),v._v(" "),_("h4",{attrs:{id:"什么是进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程"}},[v._v("#")]),v._v(" 什么是进程？")]),v._v(" "),_("p",[v._v("进程是程序的一次执行过程，是系统运行程序的基本单位，系统运行一个程序即是一个进程从创建、运行到消亡的过程。")]),v._v(" "),_("h4",{attrs:{id:"什么是线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程"}},[v._v("#")]),v._v(" 什么是线程？")]),v._v(" "),_("p",[v._v("线程是一个比进程更小的执行单位。一个进程可以有多个线程，不同的线程共享进程的"),_("strong",[v._v("堆")]),v._v("和"),_("strong",[v._v("方法区")]),v._v("资源，但每个线程都有自己的"),_("strong",[v._v("程序计数器")]),v._v("、"),_("strong",[v._v("虚拟机栈")]),v._v("和"),_("strong",[v._v("本地方法栈")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"请简要描述线程与进程的关系、区别及优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请简要描述线程与进程的关系、区别及优缺点"}},[v._v("#")]),v._v(" 请简要描述线程与进程的关系、区别及优缺点？")]),v._v(" "),_("p",[v._v("一个进程可以有多个线程，多个线程共享进程的堆和方法区（JDK1.8之后是元空间）资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。"),_("br"),v._v("\n总结：线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。")]),v._v(" "),_("h4",{attrs:{id:"程序计数器为什么是私有的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器为什么是私有的"}},[v._v("#")]),v._v(" 程序计数器为什么是私有的？")]),v._v(" "),_("p",[v._v("程序计数器私有主要是为了线程切换后能恢复到正确的执行位置。"),_("br"),v._v("\n程序计数器有两个作用：")]),v._v(" "),_("ul",[_("li",[v._v("字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如顺序执行、选择、循环、异常处理。")]),v._v(" "),_("li",[v._v("在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程切换回来的时候能够知道上次运行到哪儿了。")])]),v._v(" "),_("h4",{attrs:{id:"虚拟机栈和本地方法栈为什么是私有的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈和本地方法栈为什么是私有的"}},[v._v("#")]),v._v(" 虚拟机栈和本地方法栈为什么是私有的？")]),v._v(" "),_("p",[v._v("为了保证本线程中的局部变量不被其他线程访问到。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("虚拟机栈")]),v._v("：每个 Java 方法在执行之前会创建一个栈帧用于存储局部变量表、操作数栈、动态链接和方法返回地址。从方法调用直至执行完成的过程，对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。")]),v._v(" "),_("li",[_("strong",[v._v("本地方法栈")]),v._v("：和虚拟机栈所发挥的作用非常相似，区别是：虚拟机栈为虚拟机执行 Java 方法（字节码）服务，而本地方法栈为虚拟机用到的本地方法服务。")])]),v._v(" "),_("h4",{attrs:{id:"一句话简单介绍堆和方法区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一句话简单介绍堆和方法区"}},[v._v("#")]),v._v(" 一句话简单介绍堆和方法区？")]),v._v(" "),_("p",[v._v("堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存区域，几乎所有的对象都在堆上分配。方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")]),v._v(" "),_("h4",{attrs:{id:"并发和并行的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发和并行的区别"}},[v._v("#")]),v._v(" 并发和并行的区别？")]),v._v(" "),_("ul",[_("li",[v._v("并发：两个及两个以上的作业在 "),_("strong",[v._v("同一时间段")]),v._v(" 内执行。")]),v._v(" "),_("li",[v._v("并行：两个及两个以上的作业在 "),_("strong",[v._v("同一时刻")]),v._v(" 执行。")])]),v._v(" "),_("h4",{attrs:{id:"同步和异步的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步的区别"}},[v._v("#")]),v._v(" 同步和异步的区别？")]),v._v(" "),_("ul",[_("li",[v._v("同步：发出一个调用之后，在没有得到结果之前，该调用就不可以返回，一直等待。")]),v._v(" "),_("li",[v._v("异步：调用在发出之后，不用等待返回结果，该调用直接返回。")])]),v._v(" "),_("h4",{attrs:{id:"为什么要使用多线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用多线程"}},[v._v("#")]),v._v(" 为什么要使用多线程？")]),v._v(" "),_("ul",[_("li",[v._v("从计算机底层上来说：线程是程序执行的最小单位，线程间的切换和调度的成本远远小于进程。在单核时代，多线程主要是为了单进程利用 CPU 和 IO 的效率。而在多核时代，多个线程可以同时运行，这减少了线程上下文切换的开销，提高了进程利用多核 CPU 的能力。")]),v._v(" "),_("li",[v._v("从当代互联网的发展趋势来说：现在的系统动辄要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力和性能。")])]),v._v(" "),_("h4",{attrs:{id:"使用多线程可能带来什么问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用多线程可能带来什么问题"}},[v._v("#")]),v._v(" 使用多线程可能带来什么问题？")]),v._v(" "),_("p",[v._v("内存泄漏、死锁、线程不安全等。")]),v._v(" "),_("h4",{attrs:{id:"如何理解线程安全和不安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何理解线程安全和不安全"}},[v._v("#")]),v._v(" 如何理解线程安全和不安全？")]),v._v(" "),_("p",[v._v("线程安全和不安全是在多线程环境下对于同一份数据的访问是否能够保证其正确性和一致性的描述。")]),v._v(" "),_("ul",[_("li",[v._v("线程安全：在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性。")]),v._v(" "),_("li",[v._v("线程不安全：在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失。")])]),v._v(" "),_("h4",{attrs:{id:"单核-cpu-上运行多个线程效率一定会高吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单核-cpu-上运行多个线程效率一定会高吗"}},[v._v("#")]),v._v(" 单核 CPU 上运行多个线程效率一定会高吗？")]),v._v(" "),_("p",[v._v("不一定。对于单核CPU来说，同一时刻只能有一个线程在运行。如果线程是 CPU 密集型的，那么多个线程同时运行会导致频繁的上下文切换，增加了系统开销，降低了效率。如果线程是 IO 密集型的，那么多个线程同时运行能够利用 CPU 在等待 IO 时的空闲时间，提高了效率。")]),v._v(" "),_("h4",{attrs:{id:"说说线程的生命周期和状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说线程的生命周期和状态"}},[v._v("#")]),v._v(" 说说线程的生命周期和状态？")]),v._v(" "),_("p",[v._v("这个比较有疑问，按理说应该与进程的生命周期一致，可能有一些细分。")]),v._v(" "),_("ul",[_("li",[v._v("NEW：初始状态，线程被创建出来但没有被调用 "),_("code",[v._v("start()")]),v._v("。")]),v._v(" "),_("li",[v._v("RUNNABLE：运行状态(包括就绪 READY 和运行中 RUNNING)：线程被调用了 "),_("code",[v._v("start()")]),v._v(" 等待运行的状态。")]),v._v(" "),_("li",[v._v("BLOCKED：阻塞状态，需要等待锁释放。")]),v._v(" "),_("li",[v._v("WAITING：等待状态，表示该线程需要等待其他线程做出一些特定动作（通知或中断）。")]),v._v(" "),_("li",[v._v("TIME_WAITING：超时等待状态，可以在指定的时间后自行返回而不是像 WAITING 那样一直等待。")]),v._v(" "),_("li",[v._v("TERMINATED：终止状态，表示该线程已经运行完毕。")])]),v._v(" "),_("h4",{attrs:{id:"线程从-running-变为-blocked以及-time-waiting-状态有哪些方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程从-running-变为-blocked以及-time-waiting-状态有哪些方式"}},[v._v("#")]),v._v(" 线程从 RUNNING 变为 BLOCKED以及 TIME_WAITING 状态有哪些方式？")]),v._v(" "),_("p",[v._v("从 RUNNING 变为 BLOCKED 主要有两种情况：")]),v._v(" "),_("ol",[_("li",[v._v("等待获取锁。原因是不同线程竞争锁，比如说 "),_("code",[v._v("Synchronized")]),v._v("。")]),v._v(" "),_("li",[v._v("在等待 IO 的时候。这个时候不是线程竞争锁，而是线程将控制权交给了底层 IO 操作系统，等待底层的 I/O 操作完成。")])]),v._v(" "),_("p",[v._v("从 RUNNING 变为 TIME_WAITING 主要有以下五种方式：")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("Thread.sleep(long mills)")])]),v._v(" "),_("li",[_("code",[v._v("Object.wait(long mills)")])]),v._v(" "),_("li",[_("code",[v._v("Thread.join(long mills)")])]),v._v(" "),_("li",[_("code",[v._v("LockSupport.parkNanos()")])]),v._v(" "),_("li",[_("code",[v._v("LockSupport.parkUntil()")])])]),v._v(" "),_("p",[v._v("TIMED_WAITING 和 WAITING 状态的区别，仅仅是触发条件多了超时参数。")]),v._v(" "),_("h4",{attrs:{id:"什么是线程的上下文切换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程的上下文切换"}},[v._v("#")]),v._v(" 什么是线程的上下文切换？")]),v._v(" "),_("p",[v._v("线程在执行过程过程中会有自己的运行条件和状态（也称上下文）。当线程发生了如下三种情况会发生线程切换，将 CPU 让出来：")]),v._v(" "),_("ul",[_("li",[v._v("主动让出 CPU，比如调用了 "),_("code",[v._v("sleep()")]),v._v("、"),_("code",[v._v("wait()")]),v._v(" 等。")]),v._v(" "),_("li",[v._v("时间片用完。")]),v._v(" "),_("li",[v._v("调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。")])]),v._v(" "),_("p",[v._v("线程切换意味着需要保存当前线程的上下文，等下次线程占用 CPU 的时候恢复现场。同时要加载下一个将要占用 CPU 的线程上下文。这就是线程的上下文切换。")]),v._v(" "),_("h4",{attrs:{id:"什么是线程死锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程死锁"}},[v._v("#")]),v._v(" 什么是线程死锁？")]),v._v(" "),_("p",[v._v("线程死锁描述的是这样一种情况：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。"),_("br"),v._v("\n线程死锁的四个必要条件:")]),v._v(" "),_("ol",[_("li",[v._v("互斥条件：该资源任意一个时刻只由一个线程占用。")]),v._v(" "),_("li",[v._v("请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。")]),v._v(" "),_("li",[v._v("不剥夺条件：线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。")]),v._v(" "),_("li",[v._v("循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。")])]),v._v(" "),_("h4",{attrs:{id:"如何预防线程死锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何预防线程死锁"}},[v._v("#")]),v._v(" 如何预防线程死锁？")]),v._v(" "),_("ol",[_("li",[v._v("破坏请求与保持条件：一次性申请所有的资源。")]),v._v(" "),_("li",[v._v("破坏不剥夺条件：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。")]),v._v(" "),_("li",[v._v("破坏循环等待条件：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。")])]),v._v(" "),_("h4",{attrs:{id:"如何避免线程死锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何避免线程死锁"}},[v._v("#")]),v._v(" 如何避免线程死锁？")]),v._v(" "),_("p",[v._v("在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。")]),v._v(" "),_("h4",{attrs:{id:"sleep-和-wait-方法对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#sleep-和-wait-方法对比"}},[v._v("#")]),v._v(" "),_("code",[v._v("sleep()")]),v._v(" 和 "),_("code",[v._v("wait()")]),v._v(" 方法对比？")]),v._v(" "),_("p",[v._v("共同点：两者都可以暂停线程的运行。"),_("br"),v._v("\n区别：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("sleep()")]),v._v(" 是 "),_("code",[v._v("Thread")]),v._v(" 类的静态方法，而 "),_("code",[v._v("wait()")]),v._v(" 是 "),_("code",[v._v("Object")]),v._v(" 类的本地方法。")]),v._v(" "),_("li",[_("code",[v._v("sleep()")]),v._v(" 没有释放锁，而 "),_("code",[v._v("wait()")]),v._v(" 方法释放了锁。")]),v._v(" "),_("li",[_("code",[v._v("sleep()")]),v._v(" 通常被用于暂停执行，而 "),_("code",[v._v("wait()")]),v._v(" 通常被用于线程间交互/通信。")]),v._v(" "),_("li",[_("code",[v._v("sleep()")]),v._v(" 方法执行完成后，线程会自动苏醒，或者也可以使用 "),_("code",[v._v("wait(long timeout)")]),v._v(" 超时后线程自动苏醒。"),_("code",[v._v("wait()")]),v._v(" 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 "),_("code",[v._v("notify()")]),v._v(" 或者 "),_("code",[v._v("notifyAll()")]),v._v(" 方法。")])]),v._v(" "),_("h4",{attrs:{id:"为什么-wait-不定义在-thread-中"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么-wait-不定义在-thread-中"}},[v._v("#")]),v._v(" 为什么 "),_("code",[v._v("wait()")]),v._v(" 不定义在 Thread 中？")]),v._v(" "),_("p",[_("code",[v._v("wait()")]),v._v(" 是让获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁，并需要别的线程调用同一个对象上的 "),_("code",[v._v("notify()")]),v._v(" 或者"),_("code",[v._v("notifyAll()")]),v._v(" 方法唤醒。因为是与对象相关，所以定义在 "),_("code",[v._v("Object")]),v._v(" 类中。")]),v._v(" "),_("h4",{attrs:{id:"为什么-sleep-方法定义在-thread-类中"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么-sleep-方法定义在-thread-类中"}},[v._v("#")]),v._v(" 为什么 "),_("code",[v._v("sleep()")]),v._v(" 方法定义在 "),_("code",[v._v("Thread")]),v._v(" 类中？")]),v._v(" "),_("p",[v._v("因为 "),_("code",[v._v("sleep()")]),v._v(" 是让当前线程暂停执行，不涉及对象类，也不需要对象锁。")]),v._v(" "),_("h4",{attrs:{id:"可以直接调用-thread-中的-run-方法吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可以直接调用-thread-中的-run-方法吗"}},[v._v("#")]),v._v(" 可以直接调用 Thread 中的 "),_("code",[v._v("run()")]),v._v(" 方法吗？")]),v._v(" "),_("p",[v._v("能够调用，但不建议。"),_("br"),v._v(" "),_("strong",[v._v("调用 "),_("code",[v._v("start()")]),v._v(" 方法可以启动线程并使线程进入就绪状态，直接执行 "),_("code",[v._v("run")]),v._v(" 方法的话不会以多线程的方式执行。")])]),v._v(" "),_("h2",{attrs:{id:"jmm-java-memory-model-java-内存模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jmm-java-memory-model-java-内存模型"}},[v._v("#")]),v._v(" JMM (Java Memory Model, Java 内存模型)")]),v._v(" "),_("p",[v._v("JMM 主要定义了对于一个共享变量，当另一个线程对这个共享变量执行写操作后，这个线程对这个共享变量的可见性。")]),v._v(" "),_("h4",{attrs:{id:"为什么要弄一个-cpu-高速缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要弄一个-cpu-高速缓存"}},[v._v("#")]),v._v(" 为什么要弄一个 CPU 高速缓存？")]),v._v(" "),_("p",[v._v("CPU 高速缓存缓存的是内存数据，用于解决 CPU 处理速度和内存处理速度不对等的问题。内存缓存的是硬盘数据，用于解决硬盘访问速度过慢的问题。")]),v._v(" "),_("h4",{attrs:{id:"cpu-缓存模型是怎么样的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu-缓存模型是怎么样的"}},[v._v("#")]),v._v(" CPU 缓存模型是怎么样的？")]),v._v(" "),_("p",[v._v("CPU（CPU 寄存器、L1 D-Cache、L1 I-Cache、L2 Cache）、L3 Cache、BUS 总线、Main Memory(主存)"),_("br"),v._v("\n现代的 CPU Cache 通常分为三层，分别叫 L1、L2、L3 Cache。")]),v._v(" "),_("h4",{attrs:{id:"cpu-cache-的工作方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cpu-cache-的工作方式"}},[v._v("#")]),v._v(" CPU Cache 的工作方式？")]),v._v(" "),_("p",[v._v("CPU Cache 的工作方式：先复制一份数据到 CPU Cache 中，当 CPU 需要用到的时候就可以直接从 CPU Cache 中读取数据，当运算完成后，再将运算得到的数据写回 Main Memory 中。但是，这样存在内存缓存不一致性的问题！假设两个线程从 CPU Cache 中读取的 "),_("code",[v._v("i=1")]),v._v("，两个线程做了 "),_("code",[v._v("i++")]),v._v(" 运算后再写回 Main Memory 之后 "),_("code",[v._v("i=2")]),v._v("，而正确结果应该是 "),_("code",[v._v("i=3")]),v._v("。")]),v._v(" "),_("p",[v._v("CPU 为了解决内存缓存不一致性问题可以通过制定缓存一致性协议（比如 MESI 协议）或者其他手段解决。这个缓存一致性协议指的是在 CPU 高速缓存与主内存交互的时候需要遵守的原则和规范。"),_("br"),v._v("\n操作系统通过 "),_("strong",[v._v("内存模型")]),v._v(" 定义一系列规范来解决这个问题。")]),v._v(" "),_("h4",{attrs:{id:"什么是指令重排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是指令重排序"}},[v._v("#")]),v._v(" 什么是指令重排序？")]),v._v(" "),_("p",[v._v("简单的说，就是系统在执行代码的时候并不一定是按照写的代码的顺序依次执行的。")]),v._v(" "),_("h4",{attrs:{id:"指令重排序有哪几种"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#指令重排序有哪几种"}},[v._v("#")]),v._v(" 指令重排序有哪几种？")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("编译器优化重排")]),v._v("：编译器在不改变单线程程序语义的前提下，重新安排语句的执行顺序。")]),v._v(" "),_("li",[_("strong",[v._v("指令并行重排")]),v._v("：现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。")])]),v._v(" "),_("p",[v._v("此外，内存系统也会有重排序，但不是真正意义上的重排序，在 JMM 里表现为主存和本地内存的内容可能不一致，进而导致程序在多线程下执行可能出现问题。"),_("br"),v._v("\nJava 源代码会经历 "),_("strong",[v._v("编译器优化重排 -> 指令并行重排 -> 内存系统重排")]),v._v(" 的过程，最终才变成操作系统可执行的指令序列。")]),v._v(" "),_("h4",{attrs:{id:"指令重排序有什么隐患-怎么解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#指令重排序有什么隐患-怎么解决"}},[v._v("#")]),v._v(" 指令重排序有什么隐患？怎么解决？")]),v._v(" "),_("p",[_("strong",[v._v("指令重排序可以保证串行语义一致，但没有义务保证多线程间的语义也一致")]),v._v("，所以在多线程下，指令重排序可能会导致一些问题。")]),v._v(" "),_("ul",[_("li",[v._v("对于编译器重排序：通过禁止特定类型的编译器重排序来禁止重排序。")]),v._v(" "),_("li",[v._v("对于处理器重排序（指令并行重排和内存系统重排）：通过插入内存屏障来禁止特定类型的处理器重排序。")])]),v._v(" "),_("h4",{attrs:{id:"什么是-jmm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jmm"}},[v._v("#")]),v._v(" 什么是 JMM？")]),v._v(" "),_("p",[v._v("JMM 其实是 Java 定义的并发编程的规范，抽象了线程和主内存的关系，以及规定了从 Java 源代码到 CPU 可执行指令的转化需要遵守哪些和并发相关的原则和规范。")]),v._v(" "),_("h4",{attrs:{id:"为什么需要-jmm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-jmm"}},[v._v("#")]),v._v(" 为什么需要 JMM？")]),v._v(" "),_("p",[v._v("因为并发编程下，像 CPU 多级缓存和指令重排这类设计可能会导致程序运行出现一些问题。")]),v._v(" "),_("h4",{attrs:{id:"jmm-是如何抽象线程和主内存之间的关系的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jmm-是如何抽象线程和主内存之间的关系的"}},[v._v("#")]),v._v(" JMM 是如何抽象线程和主内存之间的关系的？")]),v._v(" "),_("p",[v._v("线程之间的共享变量必须存储在主内存中。"),_("br"),v._v("\n在当前 Java 内存模型下，线程从主存拷贝变量到本地内存中，在本地内存中进行修改。这可能会导致数据的不一致性，因此 JMM 定义了八种同步操作来规避这个问题。"),_("br"),v._v("\n八种同步操作："),_("strong",[v._v("锁定")]),v._v("、"),_("strong",[v._v("解锁")]),v._v("、"),_("strong",[v._v("读取")]),v._v("、"),_("strong",[v._v("载入")]),v._v("、"),_("strong",[v._v("使用")]),v._v("、"),_("strong",[v._v("赋值")]),v._v("、"),_("strong",[v._v("存储")]),v._v("、"),_("strong",[v._v("写入")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"什么是主内存-什么是本地内存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是主内存-什么是本地内存"}},[v._v("#")]),v._v(" 什么是主内存？什么是本地内存？")]),v._v(" "),_("ul",[_("li",[v._v("主内存：所有线程创建的实例对象都存放在主内存中，不管该实例对象是成员变量还是局部变量。（个人理解应该就是堆中的对象）")]),v._v(" "),_("li",[v._v("本地内存：每个线程都有一个私有的本地内存来存储共享变量的副本，并且每个线程只能访问自己的本地内存，无法访问其他线程的本地内存。")])]),v._v(" "),_("h4",{attrs:{id:"java-内存区域和-jmm-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-内存区域和-jmm-有什么区别"}},[v._v("#")]),v._v(" Java 内存区域和 JMM 有什么区别？")]),v._v(" "),_("ul",[_("li",[v._v("Java 内存区域是和 Java 虚拟机的运行时区域相关，定义了 JVM 在运行时如何分区存储程序数据。")]),v._v(" "),_("li",[v._v("JMM 时和 Java 并发编程相关的，可以看作是一组规范，目的是简化多线程编程，增强程序可移植性的。")])]),v._v(" "),_("h4",{attrs:{id:"什么是-happens-before-原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-happens-before-原则"}},[v._v("#")]),v._v(" 什么是 happens-before 原则？")]),v._v(" "),_("p",[v._v("在分布式环境中，通过一系列规则来定义逻辑时钟的变化，从而能通过逻辑时钟来对分布式系统中的事件的先后顺序进行判断。逻辑时钟并不度量时间本身，仅区分事件发生的前后顺序，其本质就是定义了一种 happens-before 关系。"),_("br"),v._v(" "),_("strong",[v._v("happens-before 表达的意义不仅是一个操作发生在另一个操作前面，它更想表达的是前一个操作的结果对于后一个操作是可见的，无论这两个操作是否是同一个线程内的。")])]),v._v(" "),_("h4",{attrs:{id:"为什么需要-happens-before-原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-happens-before-原则"}},[v._v("#")]),v._v(" 为什么需要 happens-before 原则？")]),v._v(" "),_("p",[v._v("为了程序员和编译器、处理器之间的平衡。")]),v._v(" "),_("ul",[_("li",[v._v("为了对编译器和处理器的约束尽可能少，只要不改变程序的执行结果，编译器和处理器怎么进行重排序优化都行。")]),v._v(" "),_("li",[v._v("对于会改变程序执行结果的重排序，JMM 要求编译器和处理器必须禁止这种重排序。")])]),v._v(" "),_("h4",{attrs:{id:"happens-before-常见规则有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#happens-before-常见规则有哪些"}},[v._v("#")]),v._v(" happens-before 常见规则有哪些？")]),v._v(" "),_("p",[v._v("有8条，着重了解下面5条：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("程序顺序规则")]),v._v("：一个线程内，按照代码顺序，写在前面的操作 happens-before 写在后面的操作。")]),v._v(" "),_("li",[_("strong",[v._v("解锁规则")]),v._v("：加锁 happens-before 解锁。")]),v._v(" "),_("li",[_("strong",[v._v("volatile 变量规则")]),v._v("：对一个 volatile 变量的写操作 happens-before 后面对这个 volatile 变量的读操作。")]),v._v(" "),_("li",[_("strong",[v._v("传递规则")]),v._v("：如果 A happens-before B，B happens-before C，那么 A happens-before C。")]),v._v(" "),_("li",[_("strong",[v._v("线程启动规则")]),v._v("：Thread 对象的 "),_("code",[v._v("start()")]),v._v(" 方法 happens-before 于这个线程的每一个动作。")])]),v._v(" "),_("h4",{attrs:{id:"happens-before-和-jmm-有什么关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#happens-before-和-jmm-有什么关系"}},[v._v("#")]),v._v(" happens-before 和 JMM 有什么关系？")]),v._v(" "),_("p",[v._v("happens-before 是 JMM 中的一个关键概念，JMM 呈现给程序员的视图就是 happens-before 规则。")]),v._v(" "),_("h4",{attrs:{id:"并发编程的三个重要特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发编程的三个重要特性"}},[v._v("#")]),v._v(" 并发编程的三个重要特性？")]),v._v(" "),_("ul",[_("li",[v._v("原子性：要么全部执行，要么都不执行。Java 中可以借助 "),_("code",[v._v("Synchronized")]),v._v(" 和各种 "),_("code",[v._v("Lock")]),v._v(" 以及各种原子类实现原子性。")]),v._v(" "),_("li",[v._v("可见性：当一个线程对共享变量进行了修改，另外的线程立即可以看到修改后的最新值。在 Java 中，可以借助 "),_("code",[v._v("Synchronized")]),v._v("、"),_("code",[v._v("volatile")]),v._v(" 以及各种 "),_("code",[v._v("Lock")]),v._v(" 实现可见性。")]),v._v(" "),_("li",[v._v("有序性：指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致。在 Java 中，"),_("code",[v._v("volatile")]),v._v(" 关键字可以禁止指令进行重排序。")])]),v._v(" "),_("h2",{attrs:{id:"volatile-关键字"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#volatile-关键字"}},[v._v("#")]),v._v(" Volatile 关键字")]),v._v(" "),_("h4",{attrs:{id:"如何保证变量的可见性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何保证变量的可见性"}},[v._v("#")]),v._v(" 如何保证变量的可见性？")]),v._v(" "),_("p",[v._v("如果我们将变量声明为 "),_("code",[v._v("volatile")]),v._v("，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。")]),v._v(" "),_("h4",{attrs:{id:"如何禁止指令重排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何禁止指令重排序"}},[v._v("#")]),v._v(" 如何禁止指令重排序？")]),v._v(" "),_("p",[_("code",[v._v("volatile")]),v._v(" 关键字除了可以保证变量的可见性，还有一个重要作用就是防止 JVM 的指令重排序。"),_("br"),v._v("\n如果将变量声明为 "),_("code",[v._v("volatile")]),v._v("，那么在对这个变量进行读写操作的时候，会通过插入特定的 "),_("strong",[v._v("内存屏障")]),v._v(" 的方式来禁止指令重排序。")]),v._v(" "),_("h4",{attrs:{id:"volatile-能保证原子性吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#volatile-能保证原子性吗"}},[v._v("#")]),v._v(" volatile 能保证原子性吗？")]),v._v(" "),_("p",[v._v("不能保证。")]),v._v(" "),_("h2",{attrs:{id:"乐观锁和悲观锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁和悲观锁"}},[v._v("#")]),v._v(" 乐观锁和悲观锁")]),v._v(" "),_("h4",{attrs:{id:"什么是悲观锁-悲观锁的应用场景是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是悲观锁-悲观锁的应用场景是什么"}},[v._v("#")]),v._v(" 什么是悲观锁？悲观锁的应用场景是什么？")]),v._v(" "),_("p",[v._v("悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题，所以在获取资源操作的时候都会上锁，其他线程想拿到这个资源就会阻塞直到锁被释放。即，共享资源每次只给一个线程使用，其他线程阻塞，用完后再把资源转让给其他线程。"),_("br"),v._v(" "),_("code",[v._v("Synchronized")]),v._v(" 和 "),_("code",[v._v("ReentrantLock")]),v._v(" 等独占锁就是悲观锁思想的实现。"),_("br"),v._v("\n悲观锁通常多用于写比较多的情况，这样可以避免频繁失败和重试影响性能，悲观锁的开销是固定的。")]),v._v(" "),_("h4",{attrs:{id:"什么是乐观锁-乐观锁适用于什么场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是乐观锁-乐观锁适用于什么场景"}},[v._v("#")]),v._v(" 什么是乐观锁？乐观锁适用于什么场景？")]),v._v(" "),_("p",[v._v("乐观锁总是假设最好的情况，认为共享资源每次被访问不会出现问题，线程可以不停执行，无需加锁无需等待，只是在提交修改的时候去验证对应的资源是否被其他线程修改了（具体的方法可以使用版本号或 CAS 算法）。"),_("br"),v._v("\n乐观锁通常用于写比较少或者说读比较多的情况，这样可以避免频繁加锁影响性能。不过，乐观锁主要针对的对象是单个共享变量。")]),v._v(" "),_("h4",{attrs:{id:"如何实现乐观锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何实现乐观锁"}},[v._v("#")]),v._v(" 如何实现乐观锁？")]),v._v(" "),_("ul",[_("li",[v._v("版本号")]),v._v(" "),_("li",[v._v("CAS 算法，用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。它是一个原子操作，底层依赖于一条 CPU 的原子指令。涉及三个操作数：\n"),_("ul",[_("li",[_("strong",[v._v("V")]),v._v("：要更新的变量值（Var）")]),v._v(" "),_("li",[_("strong",[v._v("E")]),v._v("：预期值（Expected）")]),v._v(" "),_("li",[_("strong",[v._v("N")]),v._v("：更新后的值（NEw）")])])])]),v._v(" "),_("h4",{attrs:{id:"乐观锁存在哪些问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁存在哪些问题"}},[v._v("#")]),v._v(" 乐观锁存在哪些问题？")]),v._v(" "),_("ul",[_("li",[v._v("ABA 问题：两次读取中间修改过，但 CAS 认为它是没修改过的。（加版本号或时间戳解决）")]),v._v(" "),_("li",[v._v("循环时间长开销大：CAS 通过自旋来进行重试，不成功就会一直循环，这样给 CPU 带来非常大的执行开销。（若 JVM 能支持处理器提供的 "),_("code",[v._v("pause")]),v._v(" 指令则有用）")]),v._v(" "),_("li",[v._v("只能保证一个共享变量的原子操作（使用锁或者利用 "),_("code",[v._v("AtomicReference")]),v._v(" 类把多个共享变量合并成一个共享变量来操作）")])]),v._v(" "),_("h2",{attrs:{id:"synchronized-关键字"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-关键字"}},[v._v("#")]),v._v(" Synchronized 关键字")]),v._v(" "),_("h4",{attrs:{id:"synchronized-是什么-有什么用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-是什么-有什么用"}},[v._v("#")]),v._v(" Synchronized 是什么？有什么用？")]),v._v(" "),_("p",[_("code",[v._v("Synchronized")]),v._v(" 是同步的意思，Java 中用于并发编程的关键字，主要解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。"),_("br"),v._v(" "),_("code",[v._v("Synchronized")]),v._v(" 属于"),_("strong",[v._v("重量级悲观锁")]),v._v("，但 Java6 引入了大量的优化，例如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。JDK 源码和很多框架都大量使用了 "),_("code",[v._v("Synchronized")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"如何使用-synchronized"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-synchronized"}},[v._v("#")]),v._v(" 如何使用 Synchronized？")]),v._v(" "),_("ul",[_("li",[v._v("修饰实例方法（锁当前对象实例）")]),v._v(" "),_("li",[v._v("修饰静态方法（锁当前类）")]),v._v(" "),_("li",[v._v("修饰代码块（对指定对象/类加锁）")])]),v._v(" "),_("h4",{attrs:{id:"构造方法可以用-synchronized-方法修饰吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#构造方法可以用-synchronized-方法修饰吗"}},[v._v("#")]),v._v(" 构造方法可以用 Synchronized 方法修饰吗？")]),v._v(" "),_("p",[_("strong",[v._v("构造方法不能使用 "),_("code",[v._v("Synchronized")]),v._v(" 关键字修饰")]),v._v("。因为构造方法本身是在对象创建的时候使用的，本身就属于线程安全的，不存在同步的构造方法一说。")]),v._v(" "),_("h4",{attrs:{id:"synchronized-底层原理了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-底层原理了解吗"}},[v._v("#")]),v._v(" Synchronized 底层原理了解吗？")]),v._v(" "),_("p",[_("code",[v._v("Synchronized")]),v._v(" 同步 "),_("strong",[v._v("语句块（代码块）")]),v._v(" 的实现使用的是 "),_("code",[v._v("monitorenter")]),v._v(" 和 "),_("code",[v._v("monitorexit")]),v._v(" 指令，其中 "),_("code",[v._v("monitorenter")]),v._v(" 指令指向同步代码块的开始位置，"),_("code",[v._v("monitorexit")]),v._v(" 指令则指向同步代码块的结束位置。")]),v._v(" "),_("p",[v._v("当执行 "),_("code",[v._v("monitorenter")]),v._v(" 指令时，线程试图获取锁也就是获取对象监视器 "),_("code",[v._v("monitor")]),v._v(" (每个对象都有)的持有权，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1。对象锁的拥有者线程才可以执行 "),_("code",[v._v("monitorexit")]),v._v(" 指令来释放锁，执行之后将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。")]),v._v(" "),_("p",[_("code",[v._v("Synchronized")]),v._v(" 修饰的 "),_("strong",[v._v("方法")]),v._v(" 则没有 "),_("code",[v._v("monitorenter")]),v._v(" 和 "),_("code",[v._v("monitorexit")]),v._v(" 指令，取而代之的是 "),_("code",[v._v("ACC_SYNCHRONIZED")]),v._v(" 标识，该标识指明了该方法是一个同步方法。")]),v._v(" "),_("p",[v._v("不过不管是修饰语句块还是修饰方法，本质上都是对对象监视器 "),_("code",[v._v("monitor")]),v._v(" 的获取。")]),v._v(" "),_("h4",{attrs:{id:"jdk1-6-之后的-synchronized-方法底层做了哪些优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-6-之后的-synchronized-方法底层做了哪些优化"}},[v._v("#")]),v._v(" JDK1.6 之后的 Synchronized 方法底层做了哪些优化？")]),v._v(" "),_("p",[v._v("JDK1.6 对锁的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术，来减少锁操作的开销。")]),v._v(" "),_("p",[v._v("锁主要存在四种状态，依次是："),_("strong",[v._v("无锁状态")]),v._v("、"),_("strong",[v._v("偏向锁状态")]),v._v("、"),_("strong",[v._v("轻量级锁状态")]),v._v("、"),_("strong",[v._v("重量级锁状态")]),v._v("，它们会随着竞争的激烈而升级。"),_("strong",[v._v("注意锁可以升级，但不能降级")]),v._v("，这种策略是为了提高获得锁和释放锁的效率。")]),v._v(" "),_("h4",{attrs:{id:"为什么锁能够升级却不能降级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么锁能够升级却不能降级"}},[v._v("#")]),v._v(" 为什么锁能够升级却不能降级？")]),v._v(" "),_("p",[v._v("在一般情况下，锁的升级是相对容易的，因为高级别的锁通常包含了低级别锁的信息。例如，类级别的锁可能包含对象级别锁的信息。因此，当升级时，只需保留高级别锁即可。")]),v._v(" "),_("p",[v._v("然而，锁的降级却相对困难，因为在降级时需要确保释放的是高级别锁，而不是低级别锁。如果直接释放高级别锁，可能会导致并发问题，因为其他线程可能已经获取了低级别锁。")]),v._v(" "),_("p",[v._v("另外，锁的降级可能引入新的竞争条件，因为在降级时需要在低级别锁被获取之前释放高级别锁，这可能导致其他线程竞争低级别锁。")]),v._v(" "),_("h4",{attrs:{id:"synchronized-和-volatile-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-和-volatile-有什么区别"}},[v._v("#")]),v._v(" Synchronized 和 volatile 有什么区别？")]),v._v(" "),_("p",[v._v("它们两个是互补的存在，而不是对立的。")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("volatile")]),v._v(" 只能用于变量，而 "),_("code",[v._v("Synchronized")]),v._v(" 则可以修饰方法和代码块。")]),v._v(" "),_("li",[_("code",[v._v("volatile")]),v._v(" 是线程同步的轻量级实现，性能肯定比 "),_("code",[v._v("synchronized")]),v._v(" 要好。")]),v._v(" "),_("li",[_("code",[v._v("volatile")]),v._v(" 主要用于解决变量在多个线程之间的可见性，而 "),_("code",[v._v("synchronized")]),v._v(" 解决的是多个线程之间访问资源的同步性。")])]),v._v(" "),_("h2",{attrs:{id:"reentrantlock"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock"}},[v._v("#")]),v._v(" ReentrantLock")]),v._v(" "),_("h4",{attrs:{id:"reentrantlock-是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock-是什么"}},[v._v("#")]),v._v(" ReentrantLock 是什么？")]),v._v(" "),_("p",[_("code",[v._v("ReentrantLock")]),v._v(" 实现了 "),_("code",[v._v("Lock")]),v._v(" 接口，是一个可重入且独占式的锁，和 "),_("code",[v._v("synchronized")]),v._v(" 类似，但它更加灵活、强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。")]),v._v(" "),_("p",[_("code",[v._v("ReentrantLock")]),v._v(" 里面有一个内部类 "),_("code",[v._v("Sync")]),v._v("，"),_("code",[v._v("Sync")]),v._v(" 继承 AQS("),_("code",[v._v("AbstractQueuedSynchronizer")]),v._v(")，添加锁和和释放锁的大部分操作基本都是在 "),_("code",[v._v("Sync")]),v._v(" 中实现的，"),_("code",[v._v("Sync")]),v._v(" 有公平锁 "),_("code",[v._v("FairSync")]),v._v(" 和非公平锁 "),_("code",[v._v("NonfairSync")]),v._v(" 两个子类。"),_("code",[v._v("ReentrantLock")]),v._v(" 默认使用非公平锁。")]),v._v(" "),_("h4",{attrs:{id:"公平锁和非公平锁有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#公平锁和非公平锁有什么区别"}},[v._v("#")]),v._v(" 公平锁和非公平锁有什么区别？")]),v._v(" "),_("ul",[_("li",[v._v("公平锁：锁被释放后，先申请的线程先得到锁。性能较差一些，因为公平锁为了保证时间上的绝对顺序，上下文切换更频繁。")]),v._v(" "),_("li",[v._v("非公平锁：锁被释放之后，后申请的线程可能会先获取到锁，是随机或按其他优先级排序的。性能更好，但可能会导致某些线程一直获取不到锁。")])]),v._v(" "),_("h4",{attrs:{id:"synchronized-和-reentrantlock-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-和-reentrantlock-有什么区别"}},[v._v("#")]),v._v(" Synchronized 和 ReentrantLock 有什么区别？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Synchronized")]),v._v(" 和 "),_("code",[v._v("ReentrantLock")]),v._v(" 都是可重入锁，即线程可以再次获取自己的内部锁（不可重入锁的话可能造成死锁）。JDK 提供的所有现成的 "),_("code",[v._v("Lock")]),v._v(" 实现类，包括 "),_("code",[v._v("Synchronized")]),v._v(" 关键字都是可重入的。")]),v._v(" "),_("li",[_("code",[v._v("Synchronized")]),v._v(" 依赖于 JVM，而 "),_("code",[v._v("ReentrantLock")]),v._v(" 依赖于 JDK（也就是 API 层面，需要 "),_("code",[v._v("lock()")]),v._v(" 和 "),_("code",[v._v("unlock()")]),v._v(" 方法配合 try/finally 语句块来完成）。")]),v._v(" "),_("li",[_("code",[v._v("ReentrantLock")]),v._v(" 比 "),_("code",[v._v("Synchronized")]),v._v(" 增加了一些高级功能，主要有三点：\n"),_("ul",[_("li",[v._v("等待可中断")]),v._v(" "),_("li",[v._v("可实现公平锁")]),v._v(" "),_("li",[v._v("可实现选择性通知（锁可以绑定多个条件 "),_("code",[v._v("Condition")]),v._v("，通过 "),_("code",[v._v("signalAll()")]),v._v(" 唤醒注册在该 "),_("code",[v._v("Condition")]),v._v(" 实例上等待的线程）")])])])]),v._v(" "),_("h4",{attrs:{id:"可中断锁和不可中断锁有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可中断锁和不可中断锁有什么区别"}},[v._v("#")]),v._v(" 可中断锁和不可中断锁有什么区别？")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("可中断锁")]),v._v("：获取锁的过程中可以被中断，不需要一直等到获取锁之后才能进行其他逻辑处理。")]),v._v(" "),_("li",[_("strong",[v._v("不可中断锁")]),v._v("：一旦线程申请了锁，就只能等到拿到锁以后才能进行其他的逻辑处理。"),_("code",[v._v("Synchronized")]),v._v(" 就属于不可中断锁。")])]),v._v(" "),_("h2",{attrs:{id:"reentrantreadwritelock"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reentrantreadwritelock"}},[v._v("#")]),v._v(" ReentrantReadWriteLock")]),v._v(" "),_("h4",{attrs:{id:"什么是-reentrantreadwritelock"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-reentrantreadwritelock"}},[v._v("#")]),v._v(" 什么是 ReentrantReadWriteLock？")]),v._v(" "),_("p",[_("code",[v._v("ReentrantReadWriteLock")]),v._v(" 实现了 "),_("code",[v._v("ReadWriteLock")]),v._v("，是一个可重入的读写锁，既可以保证多个线程同时读的效率，又可以保证有写入操作时的线程安全。")]),v._v(" "),_("ul",[_("li",[v._v("一般锁进行并发控制的规则：读读互斥、读写互斥、写写互斥。")]),v._v(" "),_("li",[v._v("读写锁进行并发控制的规则：读读不互斥、读写互斥、写写互斥。")])]),v._v(" "),_("p",[_("code",[v._v("ReentrantReadWriteLock")]),v._v(" 其实是两把锁，一把是 "),_("code",[v._v("WriteLick")]),v._v("，一把是 "),_("code",[v._v("ReadLock")]),v._v("。读锁是共享锁，写锁是独占锁。"),_("br"),v._v(" "),_("code",[v._v("ReentrantReadWriteLock")]),v._v(" 底层也是基于 AQS 实现的，也有公平锁和非公平锁，默认是非公平锁。")]),v._v(" "),_("h4",{attrs:{id:"reentrantreadwritelock-适用于什么场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reentrantreadwritelock-适用于什么场景"}},[v._v("#")]),v._v(" ReentrantReadWriteLock 适用于什么场景？")]),v._v(" "),_("p",[v._v("适合在读多写少的情况下使用。")]),v._v(" "),_("h4",{attrs:{id:"共享锁和独占锁有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#共享锁和独占锁有什么区别"}},[v._v("#")]),v._v(" 共享锁和独占锁有什么区别？")]),v._v(" "),_("ul",[_("li",[v._v("共享锁：一把锁可以同时被多个线程占有。")]),v._v(" "),_("li",[v._v("独占锁：一把锁只能被一个线程占有。")])]),v._v(" "),_("h4",{attrs:{id:"reentrantreadwritelock-线程获取读锁还能获取写锁吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reentrantreadwritelock-线程获取读锁还能获取写锁吗"}},[v._v("#")]),v._v(" ReentrantReadWriteLock：线程获取读锁还能获取写锁吗？")]),v._v(" "),_("ul",[_("li",[v._v("在线程持有读锁的情况下，不能取得写锁，不管读锁是不是当前线程占有的。（因为在有读锁的情况下，可能有其他线程也在读，所以不能写）")]),v._v(" "),_("li",[v._v("在线程持有写锁的情况下，可以继续获取读锁。（写锁是独占锁，说明没有其他线程在使用，所以可以获取读锁）")])]),v._v(" "),_("h4",{attrs:{id:"读锁为什么不能升级为写锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#读锁为什么不能升级为写锁"}},[v._v("#")]),v._v(" 读锁为什么不能升级为写锁？")]),v._v(" "),_("p",[v._v("**写锁可以降级为读锁，但读锁不能升级为写锁。**因为读锁升级为写锁会引起线程的争夺，毕竟写锁是独占锁。而且，还有可能会发生死锁问题，AB都想升级为写锁，都在等着对方释放资源。")]),v._v(" "),_("h2",{attrs:{id:"stampedlock"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#stampedlock"}},[v._v("#")]),v._v(" StampedLock")]),v._v(" "),_("h4",{attrs:{id:"什么是-stampedlock"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-stampedlock"}},[v._v("#")]),v._v(" 什么是 StampedLock？")]),v._v(" "),_("p",[_("code",[v._v("StampedLock")]),v._v(" 是 JDK1.8 引入的性能更好的读写锁，"),_("strong",[v._v("不可重入")]),v._v("且不支持条件变量 "),_("code",[v._v("Condition")]),v._v("。"),_("br"),v._v("\n不同于一般的 "),_("code",[v._v("Lock")]),v._v(" 类，"),_("code",[v._v("StampedLock")]),v._v(" 并不是直接实现 "),_("code",[v._v("Lock")]),v._v(" 或 "),_("code",[v._v("ReadWriteLock")]),v._v(" 接口，而是基于 "),_("strong",[v._v("CLH")]),v._v(" 锁独立实现的。（AQS 也是基于 CLH）")]),v._v(" "),_("p",[_("code",[v._v("StampedLock")]),v._v(" 提供了三种模式的读写控制：（在一定条件下可以相互转换）")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("写锁")]),v._v("：独占锁，类似于 "),_("code",[v._v("ReentrantReadWriteLock")]),v._v(" 的写锁，不过不可重入。")]),v._v(" "),_("li",[_("strong",[v._v("读锁")]),v._v("：共享锁，类似于 "),_("code",[v._v("ReentrantReadWriteLock")]),v._v(" 的读锁，不过不可重入。")]),v._v(" "),_("li",[_("strong",[v._v("乐观读")]),v._v("：允许多个线程获取了乐观读以及读锁，同时允许一个线程获取写锁。")])]),v._v(" "),_("h4",{attrs:{id:"为什么-stampedlock-不可重入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么-stampedlock-不可重入"}},[v._v("#")]),v._v(" 为什么 StampedLock 不可重入？")]),v._v(" "),_("p",[_("code",[v._v("StampedLock")]),v._v(" 获取锁的时候会返回一个 "),_("code",[v._v("long")]),v._v(" 类型的数据戳，该数据戳用于稍后的锁释放参数，如果返回的数据戳为 0，则表示锁获取失败。当前线程持有了锁再次获取的话还是会返回一个新的数据戳，所以这是不可重入的。")]),v._v(" "),_("h4",{attrs:{id:"stampedlock-为什么性能更好"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#stampedlock-为什么性能更好"}},[v._v("#")]),v._v(" StampedLock 为什么性能更好？")]),v._v(" "),_("p",[v._v("因为多了一个 "),_("strong",[v._v("乐观读")]),v._v(" 的模式，可以允许一个写线程同时获取写锁，不会导致所有的写线程阻塞。")]),v._v(" "),_("h4",{attrs:{id:"stampedlock-适用于什么场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#stampedlock-适用于什么场景"}},[v._v("#")]),v._v(" StampedLock 适用于什么场景？")]),v._v(" "),_("p",[v._v("适合于 "),_("strong",[v._v("读多写少")]),v._v(" 的场景。")]),v._v(" "),_("h4",{attrs:{id:"stampedlock-的底层原理了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#stampedlock-的底层原理了解吗"}},[v._v("#")]),v._v(" StampedLock 的底层原理了解吗？")]),v._v(" "),_("p",[_("code",[v._v("StampedLock")]),v._v(" 不是直接实现 "),_("code",[v._v("Lock")]),v._v(" 或 "),_("code",[v._v("ReadWriteLock")]),v._v(" 接口，而是基于 "),_("strong",[v._v("CLH 锁")]),v._v(" 实现的（AQS 也是基于 CLH），CLH 锁是对自旋锁的一种改良，是一种隐式的链表队列。"),_("code",[v._v("StampedLock")]),v._v(" 通过 CLH 队列进行线程的管理，通过同步状态值 "),_("code",[v._v("state")]),v._v(" 来表示锁的状态和类型。")]),v._v(" "),_("h2",{attrs:{id:"atomic-原子类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#atomic-原子类"}},[v._v("#")]),v._v(" Atomic 原子类")]),v._v(" "),_("h2",{attrs:{id:"threadlocal-类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal-类"}},[v._v("#")]),v._v(" ThreadLocal 类")]),v._v(" "),_("h4",{attrs:{id:"threadlocal-有什么用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal-有什么用"}},[v._v("#")]),v._v(" ThreadLocal 有什么用？")]),v._v(" "),_("p",[v._v("存储每个线程的私有数据。如果创建了一个 "),_("code",[v._v("ThreadLocal")]),v._v(" 变量，则访问这个变量的每个线程都会有这个变量的本地副本，从而避免了线程安全问题。")]),v._v(" "),_("h4",{attrs:{id:"threadlocal-原理了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal-原理了解吗"}},[v._v("#")]),v._v(" ThreadLocal 原理了解吗？")]),v._v(" "),_("p",[_("code",[v._v("ThreadLocal")]),v._v(" 是通过 "),_("code",[v._v("ThreadLocalMap")]),v._v(" 进行存储的，每个 "),_("code",[v._v("Thread")]),v._v(" 中都具备一个 "),_("code",[v._v("ThreadLocalMap")]),v._v("，而 "),_("code",[v._v("ThreadLocalMap")]),v._v(" 可以存储以 "),_("code",[v._v("ThreadLocal")]),v._v(" 为 key，"),_("code",[v._v("Object")]),v._v(" 对象为 value 的键值对。"),_("br"),v._v("\n注意：最终的变量是放在了当前线程的 "),_("code",[v._v("ThreadLocalMap")]),v._v(" 中，并不是存在 "),_("code",[v._v("ThreadLocal")]),v._v(" 上，"),_("code",[v._v("ThreadLocal")]),v._v(" 可以理解为是 "),_("code",[v._v("ThreadLocalMap")]),v._v(" 的封装，传递了变量值。")]),v._v(" "),_("h4",{attrs:{id:"threadlocal-内存泄漏是怎么导致的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal-内存泄漏是怎么导致的"}},[v._v("#")]),v._v(" ThreadLocal 内存泄漏是怎么导致的？")]),v._v(" "),_("p",[_("code",[v._v("ThreadLocalMap")]),v._v(" 中使用的 key 是弱引用，而 value 是强引用。那么如果 "),_("code",[v._v("ThreadLocal")]),v._v(" 没有被外部强引用的情况下，在垃圾回收时，key 会被清理掉，而 value 则不会被清理掉。这样一来，"),_("code",[v._v("ThreadLocalMap")]),v._v(" 中就会出现 key 为 null 的 Entry，而且不会被 GC 回收，这个时候就会产生内存泄漏。")]),v._v(" "),_("p",[_("code",[v._v("ThreadLocalMap")]),v._v(" 实现中考虑到了这种情况，在调用 "),_("code",[v._v("set()")]),v._v("、"),_("code",[v._v("get()")]),v._v("、"),_("code",[v._v("remove()")]),v._v(" 方法的时候，会清理掉 key 为 null 的记录。")]),v._v(" "),_("h2",{attrs:{id:"线程池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[v._v("#")]),v._v(" 线程池")]),v._v(" "),_("h4",{attrs:{id:"什么是线程池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程池"}},[v._v("#")]),v._v(" 什么是线程池？")]),v._v(" "),_("p",[v._v("线程池就是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，处理之后线程并不会立即被销毁，而是放回线程池中等待下一个任务。")]),v._v(" "),_("h4",{attrs:{id:"为什么要使用线程池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用线程池"}},[v._v("#")]),v._v(" 为什么要使用线程池？")]),v._v(" "),_("p",[v._v("线程池就是利用了池化技术，而池化技术的思想时为了减少每次获取资源的消耗，提高对资源的利用率。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("降低资源消耗")]),v._v("。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。")]),v._v(" "),_("li",[_("strong",[v._v("提高响应速度")]),v._v("。当任务到达时，任务可以不需要等到线程创建就能立即执行。")]),v._v(" "),_("li",[_("strong",[v._v("提高线程的可管理性")]),v._v("。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")])]),v._v(" "),_("h4",{attrs:{id:"如何创建线程池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何创建线程池"}},[v._v("#")]),v._v(" 如何创建线程池？")]),v._v(" "),_("ul",[_("li",[v._v("通过 "),_("code",[v._v("ThreadPoolExecutor")]),v._v(" 构造函数来创建（推荐）")]),v._v(" "),_("li",[v._v("通过 "),_("code",[v._v("Executor")]),v._v(" 框架的工具类 "),_("code",[v._v("Executors")]),v._v(" 来创建。")])]),v._v(" "),_("p",[v._v("可以创建多种类型的线程池：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("FixedThreadPool")]),v._v("：固定线程数量的线程池。")]),v._v(" "),_("li",[_("code",[v._v("SingleThreadExecutor")]),v._v("：只有一个线程的线程池。")]),v._v(" "),_("li",[_("code",[v._v("CachedThreadPool")]),v._v("：可根据实际情况调整线程数量的线程池。")]),v._v(" "),_("li",[_("code",[v._v("ScheduledThreadPool")]),v._v("：用来在给定的延迟后运行任务或者定期执行任务的线程池。")])]),v._v(" "),_("h4",{attrs:{id:"为什么不推荐使用内置线程池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么不推荐使用内置线程池"}},[v._v("#")]),v._v(" 为什么不推荐使用内置线程池？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("FixedThreadPool")]),v._v(" 和 "),_("code",[v._v("SingleThreadExecutor")]),v._v("：使用的是无界的 "),_("code",[v._v("LinkedBlockingQueue")]),v._v("，任务队列的最大长度为 "),_("code",[v._v("Integer.MAX_VALUE")]),v._v("，可能堆积大量的请求，从而导致 OOM。")]),v._v(" "),_("li",[_("code",[v._v("CachedThreadPool")]),v._v("：使用的是同步队列 "),_("code",[v._v("SynchronousQueue")]),v._v("，允许创建的线程数量为 "),_("code",[v._v("Integer.MAX_VALUE")]),v._v("，如果任务数量过多且执行速度较慢，可能会创建大量的线程，从而导致 OOM。")]),v._v(" "),_("li",[_("code",[v._v("ScheduledThreadPool")]),v._v(" 和 "),_("code",[v._v("SingleThreadSCheduledExecutor")]),v._v("：使用的是无界的延迟阻塞队列 "),_("code",[v._v("DelayedWorkQueue")]),v._v("，任务队列最大长度为 "),_("code",[v._v("Integer.MAX_VALUE")]),v._v("，可能会堆积大量的请求，从而导致 OOM。")])]),v._v(" "),_("h4",{attrs:{id:"线程池常用参数有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程池常用参数有哪些"}},[v._v("#")]),v._v(" 线程池常用参数有哪些？")]),v._v(" "),_("p",[_("code",[v._v("ThreadPoolExecutor")]),v._v(" 3 个最重要的参数：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("corePoolSize")]),v._v("：核心线程数，任务队列未达到队列容量时，最大可以同时运行的线程数量。")]),v._v(" "),_("li",[_("code",[v._v("maximumPoolSize")]),v._v("：最大线程数量。任务队列存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。")]),v._v(" "),_("li",[_("code",[v._v("WorkQueue")]),v._v("：新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到，新任务会存放在队列中等待执行。")])]),v._v(" "),_("p",[v._v("其他常见的参数：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("keepAliveTime")]),v._v("：线程池中超过核心线程数的线程在没有任务执行之后，会在 "),_("code",[v._v("keepAliveTime")]),v._v(" 之后被回收销毁。")]),v._v(" "),_("li",[_("code",[v._v("unit")]),v._v("："),_("code",[v._v("keepAliveTime")]),v._v(" 的时间单位。")]),v._v(" "),_("li",[_("code",[v._v("threadFactory")]),v._v("："),_("code",[v._v("executor")]),v._v(" 创建新线程的时候通过这个工厂来创建。")]),v._v(" "),_("li",[_("code",[v._v("handler")]),v._v("：饱和策略。当前同时运行的线程数达到最大线程数并且队列也满的时候，执行的策略。")])]),v._v(" "),_("h4",{attrs:{id:"线程池的饱和策略有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程池的饱和策略有哪些"}},[v._v("#")]),v._v(" 线程池的饱和策略有哪些？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("ThreadPoolExecutor.AbortPolicy")]),v._v("：抛出 "),_("code",[v._v("RejectedExecutionException")]),v._v(" 来拒绝新任务的处理。")]),v._v(" "),_("li",[_("code",[v._v("ThreadPoolExecutor.CallerRunsPolicy")]),v._v("：将任务会退给调用者，使用调用者的线程来执行任务。")]),v._v(" "),_("li",[_("code",[v._v("ThreadPoolExecutor.DiscardPolicy")]),v._v("：不处理新任务，直接丢弃掉。")]),v._v(" "),_("li",[_("code",[v._v("ThreadPoolExecutor.DiscardOldestPolicy")]),v._v("：此策略将丢弃最早未处理的任务请求。")])]),v._v(" "),_("h4",{attrs:{id:"线程池常用的阻塞队列有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程池常用的阻塞队列有哪些"}},[v._v("#")]),v._v(" 线程池常用的阻塞队列有哪些？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("LinkedBlockingQueue(无界队列)")]),v._v("："),_("code",[v._v("FixedThreadPool")]),v._v(" 和 "),_("code",[v._v("SingleThreadExecutor")]),v._v("。队列无界，所以 "),_("code",[v._v("FixedThreadPool")]),v._v(" 最多只能创建核心线程数的线程。")]),v._v(" "),_("li",[_("code",[v._v("SynchronousQueue(同步队列)")]),v._v("："),_("code",[v._v("CachedThreadPool")]),v._v("。队列没有容量，不存储元素。"),_("code",[v._v("CachedThreadPool")]),v._v(" 线程数可以扩展，可能会创建大量线程，从而导致 OOM。")]),v._v(" "),_("li",[_("code",[v._v("DelayedWorkQueue(延迟阻塞队列)")]),v._v("："),_("code",[v._v("ScheduledThreadPool")]),v._v(" 和 "),_("code",[v._v("SingleThreadScheduledExecutor")]),v._v("。队列会自动扩容，即永远不会阻塞，最多也只能创建核心线程数的线程。")])]),v._v(" "),_("h4",{attrs:{id:"线程池处理任务的流程了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程池处理任务的流程了解吗"}},[v._v("#")]),v._v(" 线程池处理任务的流程了解吗？")]),v._v(" "),_("ol",[_("li",[v._v("如果当前线程数小于核心线程数，新建线程来执行任务。")]),v._v(" "),_("li",[v._v("如果当前线程数等于大于核心线程数，但小于最大线程数，把任务放在任务队列中等待执行。")]),v._v(" "),_("li",[v._v("如果任务队列满了，但是当前线程数小于最大线程数，就新建线程执行任务。")]),v._v(" "),_("li",[v._v("如果当前线程数达到最大线程数，且任务队列也满了，由饱和策略决定。")])]),v._v(" "),_("h4",{attrs:{id:"如何给线程池命名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何给线程池命名"}},[v._v("#")]),v._v(" 如何给线程池命名？")]),v._v(" "),_("p",[v._v("通常有以下两种方式：")]),v._v(" "),_("ol",[_("li",[v._v("利用 guava 的 "),_("code",[v._v("ThreadFactoryBuilder")]),v._v("。")]),v._v(" "),_("li",[v._v("自己实现 "),_("code",[v._v("ThreadFactory")]),v._v("。")])]),v._v(" "),_("h4",{attrs:{id:"如何设定线程池的大小"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何设定线程池的大小"}},[v._v("#")]),v._v(" 如何设定线程池的大小？")]),v._v(" "),_("ul",[_("li",[v._v("对于 "),_("strong",[v._v("CPU 密集型任务")]),v._v("，可以设置为 N + 1，其中 N 为 CPU 核心数。多出来的 1 是为了防止线程偶发的缺页中断，或者其他原因导致的任务暂停而带来的影响。")]),v._v(" "),_("li",[v._v("对于 "),_("strong",[v._v("IO 密集型 任务")]),v._v("，可以设置为 2N。")])]),v._v(" "),_("p",[v._v("线程数更严谨的计算的方法应该是："),_("code",[v._v("最佳线程数 = N（CPU 核心数）∗（1+WT（线程等待时间）/ST（线程计算时间））")]),v._v("，其中 "),_("code",[v._v("WT（线程等待时间）=线程运行总时间 - ST（线程计算时间）")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"如何动态修改线程池的参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何动态修改线程池的参数"}},[v._v("#")]),v._v(" 如何动态修改线程池的参数？")]),v._v(" "),_("p",[v._v("可以参考美团技术团队的思路：主要对线程池的3个核心参数实现自定义可配置。")]),v._v(" "),_("h2",{attrs:{id:"future"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#future"}},[v._v("#")]),v._v(" Future")]),v._v(" "),_("h4",{attrs:{id:"future-类有什么作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#future-类有什么作用"}},[v._v("#")]),v._v(" Future 类有什么作用？")]),v._v(" "),_("p",[_("code",[v._v("Future")]),v._v(" 类是异步思想的典型运用，将耗时任务交给子线程去执行，自己则继续执行其他操作，等子线程执行完成后，再通过 "),_("code",[v._v("Future")]),v._v(" 类获取执行的结果，避免程序一直原地等待耗时任务完成导致执行效率太低。"),_("br"),v._v("\n这其实就是多线程中经典的 "),_("code",[v._v("Future 模式")]),v._v("。")]),v._v(" "),_("p",[_("code",[v._v("Future")]),v._v(" 类时一个接口，主要定义了 5 个方法 4 个功能：")]),v._v(" "),_("ul",[_("li",[v._v("取消任务。")]),v._v(" "),_("li",[v._v("判断任务是否被取消。")]),v._v(" "),_("li",[v._v("判断任务是否执行完成。")]),v._v(" "),_("li",[v._v("获取任务执行结果。")])]),v._v(" "),_("h4",{attrs:{id:"callable-和-future-有什么关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#callable-和-future-有什么关系"}},[v._v("#")]),v._v(" Callable 和 Future 有什么关系？")]),v._v(" "),_("p",[_("code",[v._v("Callable")]),v._v(" 和 "),_("code",[v._v("Future")]),v._v(" 都是接口，分别用于实现多线程的任务执行和获取任务执行结果。")]),v._v(" "),_("p",[_("code",[v._v("Callable")]),v._v(" 主要还是与 "),_("code",[v._v("Runnable")]),v._v(" 进行区分。"),_("code",[v._v("Callable")]),v._v(" 类似于 Runnable 接口，但有一个关键的区别："),_("code",[v._v("Callable")]),v._v(" 的 "),_("code",[v._v("call")]),v._v(" 方法可以返回一个值，并且可以抛出异常。而 "),_("code",[v._v("Runnable")]),v._v(" 接口则没有返回值。")]),v._v(" "),_("p",[_("code",[v._v("Future")]),v._v(" 的一个实现 "),_("code",[v._v("FutureTask")]),v._v(" 相当于对 "),_("code",[v._v("Callable")]),v._v(" 进行了封装，管理着任务执行的情况，存储了 "),_("code",[v._v("Callable")]),v._v(" 的 "),_("code",[v._v("call")]),v._v(" 方法的执行结果。"),_("code",[v._v("FutureTask")]),v._v(" 有两个构造函数，可以传入 "),_("code",[v._v("Callable")]),v._v(" 和 "),_("code",[v._v("Runnable")]),v._v(" 对象，但实际上，传入 "),_("code",[v._v("Runnable")]),v._v(" 对象也会在方法内部转化为 "),_("code",[v._v("Callable")]),v._v(" 对象。")]),v._v(" "),_("h4",{attrs:{id:"completablefuture-类有什么作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#completablefuture-类有什么作用"}},[v._v("#")]),v._v(" CompletableFuture 类有什么作用？")]),v._v(" "),_("p",[_("code",[v._v("Future")]),v._v(" 在实际使用过程中存在一些局限性，比如不支持异步任务的编排组合、获取计算结果的 "),_("code",[v._v("get()")]),v._v(" 方法为阻塞调用。"),_("br"),v._v(" "),_("code",[v._v("CompletableFuture")]),v._v(" 类则解决了这些缺陷。"),_("code",[v._v("CompletableFuture")]),v._v(" 除了提供更为好用和强大的 "),_("code",[v._v("Future")]),v._v(" 特性之外，还提供了函数式编程、异步任务编排组合（可以将多个异步任务串联起来，组成一个完整的链式调用）等能力，这是由 "),_("code",[v._v("CompletionStage")]),v._v(" 接口提供的。")]),v._v(" "),_("h2",{attrs:{id:"aqs"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aqs"}},[v._v("#")]),v._v(" AQS")]),v._v(" "),_("h4",{attrs:{id:"aqs-是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aqs-是什么"}},[v._v("#")]),v._v(" AQS 是什么？")]),v._v(" "),_("p",[v._v("AQS，全称为 "),_("code",[v._v("AbstractQueuedSynchronizer")]),v._v("，抽象队列同步器。这个类位于 "),_("code",[v._v("java.util.concurrent.locks")]),v._v(" 包下面。"),_("br"),v._v("\nAQS 是一个抽象类，主要用来构建锁和同步器，它提供了一些通用功能的实现，因此使用它可以简单高效地构造出应用广泛的同步器，比如 "),_("code",[v._v("ReentrantLock")]),v._v(" 和 "),_("code",[v._v("ReentrantReadWriteLock")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"aqs-的原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aqs-的原理是什么"}},[v._v("#")]),v._v(" AQS 的原理是什么？")]),v._v(" "),_("p",[v._v("AQS 核心思想是，如果被请求的共享资源空闲，则将请求资源的线程设置为有效工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 "),_("strong",[v._v("CLH 队列锁")]),v._v(" 实现的，即 将暂时获取不到锁的线程加入到队列中。")]),v._v(" "),_("p",[v._v("CLH 队列是一个虚拟的双向队列（即不存在队列实例，仅存在节点之间的关联关系）。AQS 是将每个请求共享资源的线程封装成一个节点来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用、当前节点在队列中的状态、前驱节点、后继节点。")]),v._v(" "),_("p",[v._v("以 "),_("code",[v._v("ReentrantLock")]),v._v(" 为例，"),_("code",[v._v("state")]),v._v(" 初始值为 0，表示未锁定状态。A 线程 "),_("code",[v._v("lock()")]),v._v(" 时，会调用 "),_("code",[v._v("tryAcquire()")]),v._v(" 独占该锁并将 "),_("code",[v._v("state+1")]),v._v(" 。此后，其他线程再 "),_("code",[v._v("tryAcquire()")]),v._v(" 时就会失败，直到 A 线程 "),_("code",[v._v("unlock()")]),v._v(" 到 "),_("code",[v._v("state=0")]),v._v("（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A 线程自己是可以重复获取此锁的（"),_("code",[v._v("state")]),v._v(" 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多少次，这样才能保证 "),_("code",[v._v("state")]),v._v(" 是能回到零态的。")]),v._v(" "),_("h4",{attrs:{id:"semaphore-有什么用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#semaphore-有什么用"}},[v._v("#")]),v._v(" Semaphore 有什么用？")]),v._v(" "),_("p",[_("code",[v._v("Semaphore")]),v._v(" 信号量，只有特定数量的线程可以同时访问资源。当初始的资源个数为 1 时，"),_("code",[v._v("Semaphore")]),v._v(" 退化为排他锁。"),_("br"),v._v(" "),_("code",[v._v("Semaphore")]),v._v(" 有两种模式：")]),v._v(" "),_("ul",[_("li",[v._v("公平模式：调用 "),_("code",[v._v("acquire()")]),v._v(" 方法的顺序就是获取许可证的顺序，遵循 FIFO。")]),v._v(" "),_("li",[v._v("非公平模式：抢占式的。")])]),v._v(" "),_("h4",{attrs:{id:"semaphore-的原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#semaphore-的原理是什么"}},[v._v("#")]),v._v(" Semaphore 的原理是什么？")]),v._v(" "),_("p",[_("code",[v._v("Semaphore")]),v._v(" 是共享锁的一种实现，它默认构造 AQS 的 "),_("code",[v._v("state")]),v._v(" 值为 "),_("code",[v._v("permits")]),v._v("，也就是许可证的数量，线程只有拿到许可证才能执行。"),_("br"),v._v("\n线程通过 "),_("code",[v._v("acquire()")]),v._v(" 方法获取许可证。如果 "),_("code",[v._v("state>=0")]),v._v(" 的话，则表示可以获取成功。如果获取成功的话，使用 CAS 操作去修改 "),_("code",[v._v("state")]),v._v(" 的值 "),_("code",[v._v("state=state-1")]),v._v("。如果 "),_("code",[v._v("state<0")]),v._v(" 的话，则表示许可证数量不足。此时会创建一个 Node 节点加入阻塞队列，挂起当前线程。"),_("br"),v._v("\n线程通过 "),_("code",[v._v("release()")]),v._v(" 方法尝试释放许可证，并使用 CAS 操作去修改 "),_("code",[v._v("state")]),v._v(" 的值 "),_("code",[v._v("state=state+1")]),v._v("。释放许可证成功之后，同时会唤醒同步队列中的一个线程。被唤醒的线程会重新尝试去修改 "),_("code",[v._v("state")]),v._v(" 的值 "),_("code",[v._v("state=state-1")]),v._v(" ，如果 "),_("code",[v._v("state>=0")]),v._v(" 则获取令牌成功，否则重新进入阻塞队列，挂起线程。")]),v._v(" "),_("h4",{attrs:{id:"countdownlatch-有什么用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch-有什么用"}},[v._v("#")]),v._v(" CountDownLatch 有什么用？")]),v._v(" "),_("p",[_("code",[v._v("CountDownLatch")]),v._v(" 允许 "),_("code",[v._v("count")]),v._v(" 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。"),_("br"),v._v(" "),_("code",[v._v("CountDownLatch")]),v._v(" 是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 "),_("code",[v._v("CountDownLatch")]),v._v(" 使用完毕后，它不能再次被使用。")]),v._v(" "),_("h4",{attrs:{id:"countdownlatch-的原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch-的原理是什么"}},[v._v("#")]),v._v(" CountDownLatch 的原理是什么？")]),v._v(" "),_("p",[_("code",[v._v("CountDownLatch")]),v._v(" 是共享锁的一种实现,它默认构造 AQS 的 "),_("code",[v._v("state")]),v._v(" 值为 "),_("code",[v._v("count")]),v._v("。当线程使用 "),_("code",[v._v("countDown()")]),v._v(" 方法时,其实使用了 "),_("code",[v._v("tryReleaseShared()")]),v._v(" 方法以 CAS 的操作来减少 "),_("code",[v._v("state")]),v._v(",直至 "),_("code",[v._v("state")]),v._v(" 为 0 。当调用 "),_("code",[v._v("await()")]),v._v(" 方法的时候，如果 "),_("code",[v._v("state")]),v._v(" 不为 0，那就证明任务还没有执行完毕，"),_("code",[v._v("await()")]),v._v(" 方法就会一直阻塞，也就是说 "),_("code",[v._v("await()")]),v._v(" 方法之后的语句不会被执行。直到 "),_("code",[v._v("count")]),v._v(" 个线程调用了 "),_("code",[v._v("countDown()")]),v._v(" 使 "),_("code",[v._v("state")]),v._v(" 值被减为0，或者调用 "),_("code",[v._v("await()")]),v._v(" 的线程被中断，该线程才会从阻塞中被唤醒，"),_("code",[v._v("await()")]),v._v(" 方法之后的语句得到执行。")]),v._v(" "),_("h4",{attrs:{id:"用过-countdownlatch-吗-什么场景下使用的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用过-countdownlatch-吗-什么场景下使用的"}},[v._v("#")]),v._v(" 用过 CountDownLatch 吗？什么场景下使用的？")]),v._v(" "),_("p",[v._v("还未使用过。")]),v._v(" "),_("h4",{attrs:{id:"cyclicbarrier-有什么用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier-有什么用"}},[v._v("#")]),v._v(" CyclicBarrier 有什么用？")]),v._v(" "),_("p",[_("code",[v._v("CyclicBarrier")]),v._v(" ，即可循环使用屏障。它要做的事情是：让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。")]),v._v(" "),_("p",[_("code",[v._v("CyclicBarrier")]),v._v(" 和 "),_("code",[v._v("CountDownLatch")]),v._v(" 类似，都是实现线程间的技术等待。但 "),_("code",[v._v("CountDownLatch")]),v._v(" 是基于 AQS 的，而 "),_("code",[v._v("CyclicBarrier")]),v._v(" 则是基于 "),_("code",[v._v("ReentrantLock")]),v._v(" 和 "),_("code",[v._v("Condition")]),v._v(" 的，功能更为强大。注意，"),_("code",[v._v("ReentrantLock")]),v._v(" 也是基于 AQS 的。")]),v._v(" "),_("h4",{attrs:{id:"cyclicbarrier-的原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier-的原理是什么"}},[v._v("#")]),v._v(" CyclicBarrier 的原理是什么？")]),v._v(" "),_("p",[_("code",[v._v("CyclicBarrier")]),v._v(" 内部通过一个 "),_("code",[v._v("count")]),v._v(" 变量作为计数器，"),_("code",[v._v("count")]),v._v(" 的初始值为 "),_("code",[v._v("parties")]),v._v(" 属性的初始化值，每当一个线程到了栅栏这里了，那么就将计数器减 1。如果 "),_("code",[v._v("count")]),v._v(" 值为 0 了，表示这是这一代最后一个线程到达栅栏，就尝试执行我们构造方法中输入的任务。在拦截过程中，每个线程调用 "),_("code",[v._v("await()")]),v._v(" 方法告诉 "),_("code",[v._v("CyclicBarrier")]),v._v(" 我已经到达了屏障，然后当前线程被阻塞。")])])}),[],!1,null,null,null);_.default=t.exports}}]);